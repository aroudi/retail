<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="au.com.biztune.retail.dao.ReportsDao">
    <!-- result maps -->
    <resultMap id="reportSaleMap" type="ReportSaleRow" >
        <result column="supplierId" property="supplierId" />
        <result column="supplierName" property="supplierName" />
        <result column="prodSku" property="prodSku" />
        <result column="prodBarcode" property="prodBarcode" />
        <result column="prodName" property="prodName" />
        <result column="prodRef" property="prodRef" />
        <result column="client" property="client" />
        <result column="prodCost" property="prodCost" />
        <result column="profitMargin" property="profitMargin" />
        <result column="prodProfit" property="prodProfit" />
        <result column="taxPaid" property="taxPaid" />
        <result column="prodPriceGross" property="prodPriceGross" />
        <result column="prodPriceNet" property="prodPriceNet" />
        <result column="invoiceDate" property="invoiceDate" />
        <result column="qtyInvoiced" property="qtyInvoiced" />
        <result column="priceSold" property="priceSold" />
        <result column="totalExTax" property="totalExTax" />
        <result column="totalIncTax" property="totalIncTax" />
        <result column="taxRate" property="taxRate" />
        <result column="taxDesc" property="taxDesc" />
        <result column="taxCode" property="taxCode" />
        <result column="txivTxnNr" property="txivTxnNr" />
        <result column="operator" property="operator" />
        <result column="deptName" property="deptName" />
        <result column="prodCat1" property="prodCat1" />
        <result column="prodCat2" property="prodCat2" />
        <result column="prodCat3" property="prodCat3" />
        <result column="qtyAvailable" property="qtyAvailable" />
        <result column="stockValue" property="stockValue" />
    </resultMap>
    <resultMap id="reportGoodsReceivedMap" type="ReportGoodReceivedRow" >
        <result column="delnId" property="delnId" />
        <result column="delnNoteNo" property="delnNoteNo" />
        <result column="supplierName" property="supplierName" />
        <result column="delnCreatedDate" property="delnCreatedDate" />
        <result column="delnDeliveryDate" property="delnDeliveryDate" />
        <result column="delnValueGross" property="delnValueGross" />
        <result column="delnValueNett" property="delnValueNett" />
        <result column="freightTaxCode" property="freightTaxCode" />
        <result column="freightTax" property="freightTax" />
        <result column="freightAmount" property="freightAmount" />
        <result column="delnSurcharge" property="delnSurcharge" />
        <result column="catalogueNo" property="catalogueNo" />
        <result column="partNo" property="partNo" />
        <result column="dlnlUnitCost" property="dlnlUnitCost" />
        <result column="dlnlQty" property="dlnlQty" />
        <result column="taxCode" property="taxCode" />
        <result column="dlnlValueTax" property="dlnlValueTax" />
        <result column="dlnlValueGross" property="dlnlValueGross" />
        <result column="totalCost" property="totalCost" />
    </resultMap>
    <select id="runRptSaleByMonthReport" resultMap="reportSaleMap" >
        select supplier.SUPPLIER_ID supplierId,
               supplier.SUPPLIER_NAME supplierName,
               product.PROD_SKU prodSku,
               product.PROD_BARCODE prodBarcode,
               product.PROD_NAME prodName,
               product.REFERENCE prodRef,
               CUSTOMER.Company_Name client,
               txn_detail.TXDE_VALUE_LINE prodCost,
               txn_detail.TXDE_PROFIT_MARGIN profitMargin,
               txn_detail.TXDE_VALUE_PROFIT prodProfit,
               txn_detail.TXDE_TAX taxPaid,
               txn_detail.TXDE_VALUE_GROSS prodPriceGross,
               txn_detail.TXDE_VALUE_NET prodPriceNet,
               invoice.TXIV_TRADING_DATE invoiceDate,
               invoice_detail.TXID_QTY_INVOICED qtyInvoiced,
               INVOICE_DETAIL.TXID_PRICE_SOLD priceSold
        from TXN_HEADER txn_header
             inner join TXN_DETAIL txn_detail on (txn_header.TXHD_ID = txn_detail.TXHD_ID)
             inner join Customer on (customer.CUSTOMER_ID = TXN_HEADER.CUSTOMER_ID)
             inner join INVOICE on (INVOICE.TXHD_ID = TXN_HEADER.TXHD_ID)
             inner join INVOICE_DETAIL on (INVOICE.TXIV_ID = INVOICE_DETAIL.TXID_ID)
             inner join PRODUCT product on (txn_detail.TXDE_PROD_ID = product.PROD_ID)
             inner join SUPP_PROD_PRICE supp_prod_price on (supp_prod_price.PROD_ID = product.PROD_ID and supp_prod_price.SPRC_PREFER_BUY = 1)
             inner join SUPP_ORGU_LINK supp_orgu_link on (supp_prod_price.SOL_ID = supp_orgu_link.SOL_ID)
             inner join SUPPLIER supplier on (supplier.SUPPLIER_ID = supp_orgu_link.SUPP_ID)
        where txn_header.orgu_id = #{param1}
        <if test="param2 != null">
            AND
            <foreach collection="param2" item="item" index="index"
                     open ="(" separator=" AND " close=")">
                    ${item.column} ${item.operator} ${item.value}
            </foreach>
        </if>

    </select>
    <select id="runRptSaleByTaxCodesReport" resultMap="reportSaleMap" >
        select
            TAX_RULE.TXRL_DESC taxDesc,
            TAX_RULE.TXRL_CODE taxCode,
            INVOICE.TXIV_TXN_NR txivTxnNr,
            CUSTOMER.Company_Name client,
            product.PROD_SKU prodSku,
            product.PROD_BARCODE prodBarcode,
            product.PROD_NAME prodName,
            product.REFERENCE prodRef,
            txn_detail.TXDE_VALUE_LINE prodCost,
            txn_detail.TXDE_PROFIT_MARGIN profitMargin,
            txn_detail.TXDE_VALUE_PROFIT prodProfit,
            txn_detail.TXDE_VALUE_GROSS prodPriceGross,
            txn_detail.TXDE_VALUE_NET prodPriceNet,
            invoice.TXIV_TRADING_DATE invoiceDate,
            invoice_detail.TXID_QTY_INVOICED qtyInvoiced,
            TAX_LEG_VARIANCE.TXLV_RATE taxRate,
            TXID_QTY_INVOICED*txn_detail.TXDE_VALUE_GROSS totalExTax,
            TXID_QTY_INVOICED*(txn_detail.TXDE_VALUE_GROSS + TAX_LEG_VARIANCE.TXLV_RATE*txn_detail.TXDE_VALUE_GROSS) totalIncTax,
            TAX_LEG_VARIANCE.TXLV_RATE*TXID_QTY_INVOICED*txn_detail.TXDE_VALUE_GROSS taxPaid

        from INVOICE_DETAIL
            inner join TXN_DETAIL txn_detail on (INVOICE_DETAIL.TXDE_ID = txn_detail.TXDE_ID)
            inner join TXN_HEADER on (txn_header.TXHD_ID = txn_detail.TXHD_ID)
            inner join INVOICE on (INVOICE.TXIV_ID = INVOICE_DETAIL.TXIV_ID)
            inner join PRODUCT product on (txn_detail.TXDE_PROD_ID = product.PROD_ID)
            inner join PROD_ORGU_LINK prod_orgu_link on (prod_orgu_link.PROD_ID = product.PROD_ID)
            inner join PROU_TXRL_LINK prou_txrl_link on (prou_txrl_link.PROU_ID = prod_orgu_link.PROU_ID)
            inner join TAX_RULE tax_rule on (prou_txrl_link.TXRL_ID = tax_rule.TXRL_ID)
            inner join TAX_LEG_VARIANCE on (tax_rule.TXRL_ID = TAX_LEG_VARIANCE.TXRL_ID)
            left outer join Customer on (customer.CUSTOMER_ID = TXN_HEADER.CUSTOMER_ID)
        where txn_header.orgu_id = #{param1}
        <if test="param2 != null">
            AND
            <foreach collection="param2" item="item" index="index"
                     open ="(" separator=" AND " close=")">
                ${item.column} ${item.operator} ${item.value}
            </foreach>
        </if>
        ORDER BY TAX_RULE.TXRL_DESC
    </select>

    <select id="runRptAccountSaleReport" resultMap="reportSaleMap" >
        select
            INVOICE.TXIV_TXN_NR txivTxnNr,
            invoice.TXIV_TRADING_DATE invoiceDate,
            product.PROD_SKU prodSku,
            product.PROD_BARCODE prodBarcode,
            product.PROD_NAME prodName,
            product.REFERENCE prodRef,
            CUSTOMER.Company_Name client,
            txn_detail.TXDE_VALUE_LINE prodCost,
            txn_detail.TXDE_PROFIT_MARGIN profitMargin,
            txn_detail.TXDE_VALUE_PROFIT prodProfit,
            txn_detail.TXDE_TAX taxPaid,
            txn_detail.TXDE_VALUE_GROSS prodPriceGross,
            txn_detail.TXDE_VALUE_NET prodPriceNet,
            invoice_detail.TXID_QTY_INVOICED qtyInvoiced,
            TXID_QTY_INVOICED*txn_detail.TXDE_VALUE_GROSS totalExTax,
            TXID_QTY_INVOICED*(txn_detail.TXDE_VALUE_GROSS + TAX_LEG_VARIANCE.TXLV_RATE*txn_detail.TXDE_VALUE_GROSS) totalIncTax,
            TAX_RULE.TXRL_CODE taxCode,
            TAX_RULE.TXRL_DESC taxDesc
        from CUSTOMER_ACCOUNT_DEBT
            inner join INVOICE on (INVOICE.TXIV_ID = CUSTOMER_ACCOUNT_DEBT.TXHD_ID)
            inner join INVOICE_DETAIL on (INVOICE.TXIV_ID = INVOICE_DETAIL.TXIV_ID)
            inner join TXN_DETAIL on (TXN_DETAIL.TXDE_ID = INVOICE_DETAIL.TXDE_ID)
            left outer join Customer on (customer.CUSTOMER_ID = CUSTOMER_ACCOUNT_DEBT.CUSTOMER_ID)
            inner join PRODUCT product on (txn_detail.TXDE_PROD_ID = product.PROD_ID)
            inner join PROD_ORGU_LINK prod_orgu_link on (prod_orgu_link.PROD_ID = product.PROD_ID)
            left outer join PROU_TXRL_LINK prou_txrl_link on (prou_txrl_link.PROU_ID = prod_orgu_link.PROU_ID)
            inner join TAX_RULE tax_rule on (prou_txrl_link.TXRL_ID = tax_rule.TXRL_ID)
            inner join TAX_LEG_VARIANCE on (tax_rule.TXRL_ID = TAX_LEG_VARIANCE.TXRL_ID)
        where INVOICE.orgu_id = #{param1}

        <if test="param2 != null">
            AND
            <foreach collection="param2" item="item" index="index"
                     open ="(" separator=" AND " close=")">
                ${item.column} ${item.operator} ${item.value}
            </foreach>
        </if>
        ORDER BY CUSTOMER.Company_Name
    </select>

    <select id="runRptSaleByTaxCodesSummary" resultMap="reportSaleMap" >
        select
            TAX_RULE.TXRL_DESC taxDesc,
            TAX_RULE.TXRL_CODE taxCode,
            SUM(txn_detail.TXDE_VALUE_LINE) prodCost,
            SUM(txn_detail.TXDE_PROFIT_MARGIN) profitMargin,
            SUM(txn_detail.TXDE_VALUE_PROFIT) prodProfit,
            SUM(txn_detail.TXDE_VALUE_GROSS) prodPriceGross,
            SUM(txn_detail.TXDE_VALUE_NET) prodPriceNet,
            SUM(invoice_detail.TXID_QTY_INVOICED) qtyInvoiced,
            SUM(TXID_QTY_INVOICED*txn_detail.TXDE_VALUE_GROSS) totalExTax,
            SUM(TXID_QTY_INVOICED*(txn_detail.TXDE_VALUE_GROSS + TAX_LEG_VARIANCE.TXLV_RATE*txn_detail.TXDE_VALUE_GROSS)) totalIncTax,
            SUM(TAX_LEG_VARIANCE.TXLV_RATE*TXID_QTY_INVOICED*txn_detail.TXDE_VALUE_GROSS) taxPaid
        from INVOICE_DETAIL
            inner join TXN_DETAIL txn_detail on (INVOICE_DETAIL.TXDE_ID = txn_detail.TXDE_ID)
            inner join INVOICE on (INVOICE.TXIV_ID = INVOICE_DETAIL.TXIV_ID)
            inner join PRODUCT product on (txn_detail.TXDE_PROD_ID = product.PROD_ID)
            inner join PROD_ORGU_LINK prod_orgu_link on (prod_orgu_link.PROD_ID = product.PROD_ID)
            inner join PROU_TXRL_LINK prou_txrl_link on (prou_txrl_link.PROU_ID = prod_orgu_link.PROU_ID)
            inner join TAX_RULE tax_rule on (prou_txrl_link.TXRL_ID = tax_rule.TXRL_ID)
            inner join TAX_LEG_VARIANCE on (tax_rule.TXRL_ID = TAX_LEG_VARIANCE.TXRL_ID)
        where INVOICE.orgu_id = #{param1}
        <if test="param2 != null">
            AND
            <foreach collection="param2" item="item" index="index"
                     open ="(" separator=" AND " close=")">
                ${item.column} ${item.operator} ${item.value}
            </foreach>
        </if>
        GROUP BY TAX_RULE.TXRL_DESC, TAX_RULE.TXRL_CODE ORDER BY TAX_RULE.TXRL_DESC
    </select>

    <select id="runRptSalesDailyReport" resultMap="reportSaleMap" >
        select
            INVOICE.TXIV_TXN_NR txivTxnNr,
            CUSTOMER.Company_Name client,
            APP_USER.USR_FIRST_NAME + ' ' + APP_USER.USR_SUR_NAME operator,
            product.PROD_SKU prodSku,
            product.PROD_BARCODE prodBarcode,
            product.PROD_NAME prodName,
            product.REFERENCE prodRef,
            txn_detail.TXDE_VALUE_LINE prodCost,
            txn_detail.TXDE_PROFIT_MARGIN profitMargin,
            txn_detail.TXDE_VALUE_PROFIT prodProfit,
            txn_detail.TXDE_VALUE_GROSS prodPriceGross,
            txn_detail.TXDE_VALUE_NET prodPriceNet,
            invoice_detail.TXID_QTY_INVOICED qtyInvoiced,
            INVOICE_DETAIL.TXID_PRICE_SOLD totalIncTax

        from INVOICE_DETAIL
            inner join TXN_DETAIL txn_detail on (INVOICE_DETAIL.TXDE_ID = txn_detail.TXDE_ID)
            inner join INVOICE on (INVOICE.TXIV_ID = INVOICE_DETAIL.TXIV_ID)
            inner join PRODUCT product on (txn_detail.TXDE_PROD_ID = product.PROD_ID)
            inner join APP_USER on (APP_USER.USR_ID = INVOICE.TXIV_OPERATOR)
            left outer join Customer on (customer.CUSTOMER_ID = INVOICE.CUSTOMER_ID)
        where INVOICE.orgu_id = #{param1}
        <if test="param2 != null">
            AND
            <foreach collection="param2" item="item" index="index"
                     open ="(" separator=" AND " close=")">
                ${item.column} ${item.operator} ${item.value}
            </foreach>
        </if>
        <if test="param3 != null">
            ORDER BY
            <foreach collection="param3" item="item" index="index"
                     open =" " separator="," close=" ">
                ${item.value}
            </foreach>
        </if>
    </select>
    <select id="runRptSalesPeriodReport" resultMap="reportSaleMap" >

        SELECT * ,
        PROD_CAT_1 prodCat1,
        PROD_CAT_2 prodCat2,
        PROD_CAT_3 prodCat3
        FROM
        (
            SELECT
                prodSku,
                prodBarcode,
                prodName,
                prodRef,
                prodCost,
                profitMargin,
                prodProfit,
                prodPriceGross,
                prodPriceNet,
                qtyInvoiced,
                totalIncTax,
                deptName,
                [CATH_TYPE_CONST],
                [CAT_VALUE]
            FROM
            (
                        select
                            product.PROD_SKU prodSku,
                            product.PROD_BARCODE prodBarcode,
                            product.PROD_NAME prodName,
                            product.REFERENCE prodRef,
                            PRODUCT_GROUP.DEPT_NAME deptName,
                            PRODUCT_GROUP.CATH_TYPE_CONST,
                            PRODUCT_GROUP.CATH_NAME,
                            PRODUCT_GROUP.CAT_VALUE,
                            txn_detail.TXDE_VALUE_LINE prodCost,
                            txn_detail.TXDE_PROFIT_MARGIN profitMargin,
                            txn_detail.TXDE_VALUE_PROFIT prodProfit,
                            txn_detail.TXDE_VALUE_GROSS prodPriceGross,
                            txn_detail.TXDE_VALUE_NET prodPriceNet,
                            invoice_detail.TXID_QTY_INVOICED qtyInvoiced,
                            INVOICE_DETAIL.TXID_PRICE_SOLD totalIncTax,
                            PRODUCT_GROUP.CAT_VAL_ID

                        from INVOICE_DETAIL
                            inner join TXN_DETAIL txn_detail on (INVOICE_DETAIL.TXDE_ID = txn_detail.TXDE_ID)
                            inner join INVOICE on (INVOICE.TXIV_ID = INVOICE_DETAIL.TXIV_ID)
                            inner join PRODUCT product on (txn_detail.TXDE_PROD_ID = product.PROD_ID)
                            left outer join
                                (
                                        select
                                            prod_id,
                                            DEPARTMENT.DEPT_NAME,
                                            DEPT_CATEGORY.CATH_TYPE_CONST,
                                            CATEGORY_HEADING.CATH_NAME,
                                            CATEGORY_VALUE.CAT_VALUE,
                                            PROD_DEPT_CAT.CAT_VAL_ID

                                        from
                                            PROD_DEPT_CAT inner join DEPT_CATEGORY on (PROD_DEPT_CAT.DEPT_ID = DEPT_CATEGORY.DEPT_ID AND PROD_DEPT_CAT.CAT_ID = DEPT_CATEGORY.CATH_ID )
                                            INNER JOIN CATEGORY_VALUE ON (PROD_DEPT_CAT.CAT_VAL_ID = CATEGORY_VALUE.CATV_ID)
                                            INNER JOIN CATEGORY_HEADING on (PROD_DEPT_CAT.CAT_ID = CATEGORY_HEADING.CATH_ID)
                                            INNER JOIN DEPARTMENT ON (PROD_DEPT_CAT.DEPT_ID = DEPARTMENT.DEPT_ID)

                                ) PRODUCT_GROUP on (PRODUCT.PROD_ID = PRODUCT_GROUP.PROD_ID)
                        WHERE INVOICE.ORGU_ID = #{param1}
                            <if test="param2 != null">
                                AND
                                <foreach collection="param2" item="item" index="index"
                                         open ="(" separator=" AND " close=")">
                                    ${item.column} ${item.operator} ${item.value}
                                </foreach>
                            </if>
            ) QUERY1

        ) AS SourceTable	  PIVOT ( MAX ([CAT_VALUE]) FOR [CATH_TYPE_CONST] IN ([PROD_CAT_1],[PROD_CAT_2],[PROD_CAT_3])) AS PivotTable
        <if test="param3 != null">
            ORDER BY
            <foreach collection="param3" item="item" index="index"
                     open =" " separator="," close=" ">
                ${item.value}
            </foreach>
        </if>
    </select>
    <select id="runRptWhatIsSelling" resultMap="reportSaleMap" >
    SELECT * ,
    PROD_CAT_1 prodCat1,
    PROD_CAT_2 prodCat2,
    PROD_CAT_3 prodCat3
    FROM
    (
            SELECT
                prodSku,
                prodBarcode,
                prodName,
                prodRef,
                supplierId,
                supplierName,
                prodCost,
                qtyAvailable,
                stockValue,
                prodPriceGross,
                qtyInvoiced,
                deptName,
                [CATH_TYPE_CONST],
                [CAT_VALUE]
            FROM
            (

				select
					product.PROD_SKU prodSku,
					product.PROD_BARCODE prodBarcode,
					product.PROD_NAME prodName,
					product.REFERENCE prodRef,
					PRODUCT_GROUP.DEPT_NAME deptName,
					PRODUCT_GROUP.CATH_TYPE_CONST,
					PRODUCT_GROUP.CATH_NAME,
					PRODUCT_GROUP.CAT_VALUE,
					supplier.SUPPLIER_ID supplierId,
					supplier.SUPPLIER_NAME supplierName,
					STOCK.STCK_QTY qtyAvailable,
					costPrice.PRCE_PRICE prodCost,
					costPrice.PRCE_PRICE * STOCK.STCK_QTY stockValue,
					INVOICE_DETAIL.TXID_QTY_INVOICED qtyInvoiced,
					sellPrice.PRCE_PRICE prodPriceGross,
                    PRODUCT_GROUP.CAT_VAL_ID

				from PRODUCT
					 inner join SUPP_PROD_PRICE supp_prod_price on (supp_prod_price.PROD_ID = product.PROD_ID and supp_prod_price.SPRC_PREFER_BUY = 1)
					 inner join SUPP_ORGU_LINK supp_orgu_link on (supp_prod_price.SOL_ID = supp_orgu_link.SOL_ID)
					 inner join SUPPLIER supplier on (supplier.SUPPLIER_ID = supp_orgu_link.SUPP_ID)
					 left outer join STOCK on (	stock.PROD_ID = PRODUCT.PROD_ID)
                    INNER JOIN CONFIG_CATEGORY cc1 on (stock.STCK_COND = cc1.category_id and cc1.CATEGORY_CODE = 'STOCK_CONDITION_PRISTINE')
                    INNER JOIN CONFIG_CATEGORY cc2 on (stock.STCK_CAT = cc2.category_id AND cc2.CATEGORY_CODE = 'STOCK_CATEGORY_SALEABLE')
					inner join PRICE costPrice ON (PRODUCT.PROD_ID = costPrice.PROD_ID)
					inner join PRICE_CODE costPriceCode ON (costPriceCode.PRCC_ID = costPrice.PRCC_ID AND costPriceCode.PRCC_CODE = 'COST_PRICE')
					inner join PRICE sellPrice ON (PRODUCT.PROD_ID = sellPrice.PROD_ID)
					inner join PRICE_CODE sellPriceCode ON (sellPriceCode.PRCC_ID = sellPrice.PRCC_ID AND sellPriceCode.PRCC_CODE = 'SELL_PRICE')

					left outer join TXN_DETAIL on (txn_detail.TXDE_PROD_ID = product.PROD_ID)
					inner join INVOICE_DETAIL  on (INVOICE_DETAIL.TXDE_ID = txn_detail.TXDE_ID)
					inner join INVOICE on (INVOICE.TXIV_ID = INVOICE_DETAIL.TXIV_ID)
					left outer join
						(
								select
									prod_id,
									DEPARTMENT.DEPT_NAME,
									DEPT_CATEGORY.CATH_TYPE_CONST,
									CATEGORY_HEADING.CATH_NAME,
									CATEGORY_VALUE.CAT_VALUE,
                                    PROD_DEPT_CAT.CAT_VAL_ID
        from
									PROD_DEPT_CAT inner join DEPT_CATEGORY on (PROD_DEPT_CAT.DEPT_ID = DEPT_CATEGORY.DEPT_ID AND PROD_DEPT_CAT.CAT_ID = DEPT_CATEGORY.CATH_ID )
									INNER JOIN CATEGORY_VALUE ON (PROD_DEPT_CAT.CAT_VAL_ID = CATEGORY_VALUE.CATV_ID)
									INNER JOIN CATEGORY_HEADING on (PROD_DEPT_CAT.CAT_ID = CATEGORY_HEADING.CATH_ID)
									INNER JOIN DEPARTMENT ON (PROD_DEPT_CAT.DEPT_ID = DEPARTMENT.DEPT_ID)

						) PRODUCT_GROUP on (PRODUCT.PROD_ID = PRODUCT_GROUP.PROD_ID)
                        WHERE INVOICE.ORGU_ID = #{param1}
                        <if test="param2 != null">
                            AND
                            <foreach collection="param2" item="item" index="index"
                                     open ="(" separator=" AND " close=")">
                                ${item.column} ${item.operator} ${item.value}
                            </foreach>
                        </if>
           ) QUERY1
        ) AS SourceTable	  PIVOT ( MAX ([CAT_VALUE]) FOR [CATH_TYPE_CONST] IN ([PROD_CAT_1],[PROD_CAT_2],[PROD_CAT_3])) AS PivotTable
            <if test="param3 != null">
                ORDER BY
                <foreach collection="param3" item="item" index="index"
                         open =" " separator="," close=" ">
                    ${item.value}
                </foreach>
            </if>

    </select>
    <select id="runRptProfitByProduct" resultMap="reportSaleMap" >
    SELECT * ,
    PROD_CAT_1 prodCat1,
    PROD_CAT_2 prodCat2,
    PROD_CAT_3 prodCat3
    FROM
    (
            SELECT
                prodSku,
                prodBarcode,
                prodName,
                prodRef,
                --supplierId,
                supplierName,
                prodCost,
                qtyAvailable,
                stockValue,
                qtyInvoiced,
                rrp,
                priceSold,
                totalExTax,
                expectedTotalExTax,
                actualProfit,
                expectedProfit,
                deptName,
                [CATH_TYPE_CONST],
                [CAT_VALUE]
            FROM
            (
				select
                    max(product.PROD_SKU) prodSku,
                    max(product.PROD_BARCODE) prodBarcode,
                    max(product.PROD_NAME) prodName,
                    max(product.REFERENCE) prodRef,
                    max(PRODUCT_GROUP.DEPT_NAME) deptName,
                    max(PRODUCT_GROUP.CATH_TYPE_CONST) CATH_TYPE_CONST,
                    max(PRODUCT_GROUP.CATH_NAME)CATH_NAME,
                    max(PRODUCT_GROUP.CAT_VALUE)CAT_VALUE,
                    max(supplier.SUPPLIER_ID) supplierId,
                    max(supplier.SUPPLIER_NAME) supplierName,
                    max(STOCK.STCK_QTY) qtyAvailable,
                    avg(costPrice.PRCE_PRICE) prodCost,
                    avg(costPrice.PRCE_PRICE * STOCK.STCK_QTY) stockValue,
                    sum(INVOICE_DETAIL.TXID_QTY_INVOICED) qtyInvoiced,
                    avg(sellPrice.PRCE_PRICE) rrp,
                    avg(sellPrice.PRCE_PRICE*INVOICE_DETAIL.TXID_QTY_INVOICED) expectedTotalExTax,
                    sum(INVOICE_DETAIL.TXID_QTY_INVOICED*(sellPrice.PRCE_PRICE - costPrice.PRCE_PRICE )) expectedProfit,
                    avg(TXN_DETAIL.TXDE_VALUE_GROSS) priceSold,
                    sum(TXN_DETAIL.TXDE_VALUE_GROSS*INVOICE_DETAIL.TXID_QTY_INVOICED) totalExTax,
                    sum(INVOICE_DETAIL.TXID_QTY_INVOICED*(TXN_DETAIL.TXDE_VALUE_GROSS - costPrice.PRCE_PRICE )) actualProfit,
                    max(PRODUCT_GROUP.CAT_VAL_ID) CAT_VAL_ID
                from PRODUCT
					 inner join SUPP_PROD_PRICE supp_prod_price on (supp_prod_price.PROD_ID = product.PROD_ID and supp_prod_price.SPRC_PREFER_BUY = 1)
					 inner join SUPP_ORGU_LINK supp_orgu_link on (supp_prod_price.SOL_ID = supp_orgu_link.SOL_ID)
					 inner join SUPPLIER supplier on (supplier.SUPPLIER_ID = supp_orgu_link.SUPP_ID)
					 left outer join STOCK on (	stock.PROD_ID = PRODUCT.PROD_ID)
                    INNER JOIN CONFIG_CATEGORY cc1 on (stock.STCK_COND = cc1.category_id and cc1.CATEGORY_CODE = 'STOCK_CONDITION_PRISTINE')
                    INNER JOIN CONFIG_CATEGORY cc2 on (stock.STCK_CAT = cc2.category_id AND cc2.CATEGORY_CODE = 'STOCK_CATEGORY_SALEABLE')
					inner join PRICE costPrice ON (PRODUCT.PROD_ID = costPrice.PROD_ID)
					inner join PRICE_CODE costPriceCode ON (costPriceCode.PRCC_ID = costPrice.PRCC_ID AND costPriceCode.PRCC_CODE = 'COST_PRICE')
					inner join PRICE sellPrice ON (PRODUCT.PROD_ID = sellPrice.PROD_ID)
					inner join PRICE_CODE sellPriceCode ON (sellPriceCode.PRCC_ID = sellPrice.PRCC_ID AND sellPriceCode.PRCC_CODE = 'SELL_PRICE')

					left outer join TXN_DETAIL on (txn_detail.TXDE_PROD_ID = product.PROD_ID)
					inner join INVOICE_DETAIL  on (INVOICE_DETAIL.TXDE_ID = txn_detail.TXDE_ID)
					inner join INVOICE on (INVOICE.TXIV_ID = INVOICE_DETAIL.TXIV_ID)
					left outer join
						(
								select
									prod_id,
									DEPARTMENT.DEPT_NAME,
									DEPT_CATEGORY.CATH_TYPE_CONST,
									CATEGORY_HEADING.CATH_NAME,
									CATEGORY_VALUE.CAT_VALUE,
                                    PROD_DEPT_CAT.CAT_VAL_ID
								from
									PROD_DEPT_CAT inner join DEPT_CATEGORY on (PROD_DEPT_CAT.DEPT_ID = DEPT_CATEGORY.DEPT_ID AND PROD_DEPT_CAT.CAT_ID = DEPT_CATEGORY.CATH_ID )
									INNER JOIN CATEGORY_VALUE ON (PROD_DEPT_CAT.CAT_VAL_ID = CATEGORY_VALUE.CATV_ID)
									INNER JOIN CATEGORY_HEADING on (PROD_DEPT_CAT.CAT_ID = CATEGORY_HEADING.CATH_ID)
									INNER JOIN DEPARTMENT ON (PROD_DEPT_CAT.DEPT_ID = DEPARTMENT.DEPT_ID)

						) PRODUCT_GROUP on (PRODUCT.PROD_ID = PRODUCT_GROUP.PROD_ID)
                        WHERE INVOICE.ORGU_ID = #{param1}
                        <if test="param2 != null">
                            AND
                            <foreach collection="param2" item="item" index="index"
                                     open ="(" separator=" AND " close=")">
                                ${item.column} ${item.operator} ${item.value}
                            </foreach>
                        </if>
                        GROUP BY product.PROD_ID
           ) QUERY1
        ) AS SourceTable	  PIVOT ( MAX ([CAT_VALUE]) FOR [CATH_TYPE_CONST] IN ([PROD_CAT_1],[PROD_CAT_2],[PROD_CAT_3])) AS PivotTable
        <if test="param3 != null">
            ORDER BY
            <foreach collection="param3" item="item" index="index"
                     open =" " separator="," close=" ">
                ${item.value}
            </foreach>
        </if>
    </select>

    <select id="runRptWhatIsOnOrder" resultMap="reportSaleMap" >

    SELECT * ,
    PROD_CAT_1 prodCat1,
    PROD_CAT_2 prodCat2,
    PROD_CAT_3 prodCat3
    FROM
    (
            SELECT
				createdBy,
                supplierId,
                supplierName,
                prodSku,
                prodBarcode,
                prodName,
                prodRef,
                pohNumber,
                pohConfirmDate,
                pohStatus,
                catalogueNo,
                partNo,
                polUnitCost,
                polValueTax,
                polValueGross,
                polQtyOrdered,
                polQtyReceived,
                polStatus,
                polValueOrdered,
                pohExpDelivery,
                deptName,
                [CATH_TYPE_CONST],
                [CAT_VALUE]
            FROM
            (

				select
					APP_USER.USR_FIRST_NAME + ' ' + APP_USER.USR_SUR_NAME createdBy,
					supplier.SUPPLIER_ID supplierId,
					supplier.SUPPLIER_NAME supplierName,
					product.PROD_SKU prodSku,
					product.PROD_BARCODE prodBarcode,
					product.PROD_NAME prodName,
					product.REFERENCE prodRef,
					PURCHASE_ORDER_HEADER.POH_ORDER_NUMBER pohNumber,
					PURCHASE_ORDER_HEADER.POH_CONFIRM_DATE pohConfirmDate,
					PURCHASE_ORDER_HEADER.POH_EXP_DELIVERY pohExpDelivery,
					pohStatus.DESCRIPTION pohStatus,
					SUPP_PROD_PRICE.CATALOGUE_NO catalogueNo,
					SUPP_PROD_PRICE.PART_NO partNo,
					PURCHASE_LINE.POL_UNIT_COST polUnitCost,
					PURCHASE_LINE.POL_VALUE_TAX polValueTax,
					PURCHASE_LINE.POL_VALUE_GROSS polValueGross,
					PURCHASE_LINE.POL_QTY_ORDERED polQtyOrdered,
					PURCHASE_LINE.POL_QTY_RECEIVED polQtyReceived,
					polStatus.DESCRIPTION polStatus,
					PURCHASE_LINE.POL_VALUE_ORDERED polValueOrdered,
					PRODUCT_GROUP.DEPT_NAME deptName,
					PRODUCT_GROUP.CATH_TYPE_CONST,
					PRODUCT_GROUP.CATH_NAME,
					PRODUCT_GROUP.CAT_VALUE,
                    PRODUCT_GROUP.CAT_VAL_ID

				from PURCHASE_LINE
					 INNER JOIN PURCHASE_ORDER_HEADER ON (PURCHASE_ORDER_HEADER.POH_ID = PURCHASE_LINE.POH_ID)
					 INNER JOIN PRODUCT ON (PRODUCT.PROD_ID = PURCHASE_LINE.POL_PROD_ID)
					 INNER JOIN SUPP_PROD_PRICE ON (SUPP_PROD_PRICE.SPRC_ID = PURCHASE_LINE.SPRC_ID)
					 INNER JOIN SUPPLIER ON (SUPPLIER.SUPPLIER_ID = PURCHASE_LINE.POL_SUPP_ID)
					 INNER JOIN APP_USER ON (APP_USER.USR_ID = PURCHASE_ORDER_HEADER.POH_LAST_MODIFIED_BY)
					 LEFT OUTER JOIN CONFIG_CATEGORY pohStatus on (pohStatus.CATEGORY_ID = PURCHASE_ORDER_HEADER.POH_STATUS and pohStatus.CATEGORY_CODE in ('POH_STATUS_CONFIRMED', 'POH_STATUS_PARTIAL_REC'))
					 left outer join CONFIG_CATEGORY polStatus on (polStatus.CATEGORY_ID = PURCHASE_LINE.POL_STATUS and polStatus.CATEGORY_CODE in ('POH_STATUS_CONFIRMED', 'POH_STATUS_PARTIAL_REC'))
	 				 left outer join
						(
								select
									prod_id,
									DEPARTMENT.DEPT_NAME,
									DEPT_CATEGORY.CATH_TYPE_CONST,
									CATEGORY_HEADING.CATH_NAME,
									CATEGORY_VALUE.CAT_VALUE,
                                    PROD_DEPT_CAT.CAT_VAL_ID
        from
									PROD_DEPT_CAT inner join DEPT_CATEGORY on (PROD_DEPT_CAT.DEPT_ID = DEPT_CATEGORY.DEPT_ID AND PROD_DEPT_CAT.CAT_ID = DEPT_CATEGORY.CATH_ID )
									INNER JOIN CATEGORY_VALUE ON (PROD_DEPT_CAT.CAT_VAL_ID = CATEGORY_VALUE.CATV_ID)
									INNER JOIN CATEGORY_HEADING on (PROD_DEPT_CAT.CAT_ID = CATEGORY_HEADING.CATH_ID)
									INNER JOIN DEPARTMENT ON (PROD_DEPT_CAT.DEPT_ID = DEPARTMENT.DEPT_ID)

						) PRODUCT_GROUP on (PRODUCT.PROD_ID = PRODUCT_GROUP.PROD_ID)
                        WHERE PURCHASE_ORDER_HEADER.ORGU_ID = #{param1}
                            <if test="param2 != null">
                                AND
                                <foreach collection="param2" item="item" index="index"
                                         open ="(" separator=" AND " close=")">
                                    ${item.column} ${item.operator} ${item.value}
                                </foreach>
                            </if>

           ) QUERY1
        ) AS SourceTable	  PIVOT ( MAX ([CAT_VALUE]) FOR [CATH_TYPE_CONST] IN ([PROD_CAT_1],[PROD_CAT_2],[PROD_CAT_3])) AS PivotTable
            <if test="param3 != null">
                ORDER BY
                <foreach collection="param3" item="item" index="index"
                         open =" " separator="," close=" ">
                    ${item.value}
                </foreach>
            </if>
    </select>
    <select id="runRptPriceByGrade" resultMap="reportSaleMap" >
        SELECT * ,
        PROD_CAT_1 prodCat1,
        PROD_CAT_2 prodCat2,
        PROD_CAT_3 prodCat3,
        defaultGradeGp =
            CASE defaultGrade
            WHEN 0 THEN 0
            ELSE (defaultGrade - prodCost)*100/defaultGrade
            END,
        aGradeGp =
            CASE aGrade
            WHEN 0 THEN 0
            ELSE (aGrade - prodCost)*100/aGrade
            END,
        bGradeGp =
            CASE bGrade
            WHEN 0 THEN 0
            ELSE (bGrade - prodCost)*100/bGrade
            END,
        cGradeGp =
            CASE cGrade
            WHEN 0 THEN 0
            ELSE (cGrade - prodCost)*100/cGrade
            END,
        dGradeGp =
            CASE dGrade
            WHEN 0 THEN 0
            ELSE (dGrade - prodCost)*100/dGrade
            END

        FROM
        (
        SELECT
            prodSku,
            prodBarcode,
            prodName,
            prodRef,
            supplierId,
            supplierName,
            prodCost,
            rrp,
            rrpGp =
            CASE rrp
            WHEN 0 THEN 0
            ELSE (rrp - prodCost)*100/rrp
            END,
            qtyAvailable,
            deptName,
            [CATH_TYPE_CONST],
            [CAT_VALUE],
            Default_GRADE,
            A_GRADE,
            B_GRADE,
            C_GRADE,
            D_GRADE,
            Default_GRADE_RATE,
            A_GRADE_RATE,
            B_GRADE_RATE,
            C_GRADE_RATE,
            D_GRADE_RATE,
            defaultGrade =
                CASE Default_GRADE
                WHEN 'Cost + %' THEN prodCost + Default_GRADE_RATE*prodCost
                WHEN 'Cost + $' THEN prodCost + Default_GRADE_RATE
                WHEN 'Fixed $' THEN Default_GRADE_RATE
                WHEN 'RRP - %' THEN rrp - rrp*Default_GRADE_RATE
                WHEN 'RRP - $' THEN rrp - Default_GRADE_RATE
                ELSE 0
                END,
            aGrade =
                CASE A_GRADE
                WHEN 'Cost + %' THEN prodCost + A_GRADE_RATE*prodCost
                WHEN 'Cost + $' THEN prodCost + A_GRADE_RATE
                WHEN 'Fixed $' THEN A_GRADE_RATE
                WHEN 'RRP - %' THEN rrp - rrp*A_GRADE_RATE
                WHEN 'RRP - $' THEN rrp - A_GRADE_RATE
                ELSE 0
                END,
            bGrade =
                CASE B_GRADE
                WHEN 'Cost + %' THEN prodCost + B_GRADE_RATE*prodCost
                WHEN 'Cost + $' THEN prodCost + B_GRADE_RATE
                WHEN 'Fixed $' THEN B_GRADE_RATE
                WHEN 'RRP - %' THEN rrp - rrp*B_GRADE_RATE
                WHEN 'RRP - $' THEN rrp - B_GRADE_RATE
                ELSE 0
                END,
            cGrade =
                CASE C_GRADE
                WHEN 'Cost + %' THEN prodCost + C_GRADE_RATE*prodCost
                WHEN 'Cost + $' THEN prodCost + C_GRADE_RATE
                WHEN 'Fixed $' THEN C_GRADE_RATE
                WHEN 'RRP - %' THEN rrp - rrp*C_GRADE_RATE
                WHEN 'RRP - $' THEN rrp - C_GRADE_RATE
                ELSE 0
                END,
            dGrade =
                CASE D_GRADE
                WHEN 'Cost + %' THEN prodCost + D_GRADE_RATE*prodCost
                WHEN 'Cost + $' THEN prodCost + D_GRADE_RATE
                WHEN 'Fixed $' THEN D_GRADE_RATE
                WHEN 'RRP - %' THEN rrp - rrp*D_GRADE_RATE
                WHEN 'RRP - $' THEN rrp - D_GRADE_RATE
                ELSE 0
                END

        FROM
        (
        select
            product.PROD_SKU prodSku,
            product.PROD_BARCODE prodBarcode,
            product.PROD_NAME prodName,
            product.REFERENCE prodRef,
            supp_prod_price.COST_BEFORE_TAX prodCost,
            supp_prod_price.PRICE rrp,
            PRODUCT_GROUP.DEPT_NAME deptName,
            PRODUCT_GROUP.CATH_TYPE_CONST,
            PRODUCT_GROUP.CATH_NAME,
            PRODUCT_GROUP.CAT_VALUE,
            supplier.SUPPLIER_ID supplierId,
            supplier.SUPPLIER_NAME supplierName,
            STOCK.STCK_QTY qtyAvailable,
            PRODUCT_GROUP.CAT_VAL_ID,
            GRADE_RATE.*,
            GRADE_FORMULA.*

        from PRODUCT
        inner join SUPP_PROD_PRICE supp_prod_price on (supp_prod_price.PROD_ID = product.PROD_ID and supp_prod_price.SPRC_PREFER_BUY = 1)
        inner join SUPP_ORGU_LINK supp_orgu_link on (supp_prod_price.SOL_ID = supp_orgu_link.SOL_ID)
        inner join SUPPLIER supplier on (supplier.SUPPLIER_ID = supp_orgu_link.SUPP_ID)
        left outer join STOCK on (	stock.PROD_ID = PRODUCT.PROD_ID)
        LEFT OUTER JOIN CONFIG_CATEGORY cc1 on (stock.STCK_COND = cc1.category_id and cc1.CATEGORY_CODE = 'STOCK_CONDITION_PRISTINE')
        LEFT OUTER JOIN CONFIG_CATEGORY cc2 on (stock.STCK_CAT = cc2.category_id AND cc2.CATEGORY_CODE = 'STOCK_CATEGORY_SALEABLE')
        left outer join
        (
        select
        prod_id,
        DEPARTMENT.DEPT_NAME,
        DEPT_CATEGORY.CATH_TYPE_CONST,
        CATEGORY_HEADING.CATH_NAME,
        CATEGORY_VALUE.CAT_VALUE,
        PROD_DEPT_CAT.CAT_VAL_ID
        from
        PROD_DEPT_CAT inner join DEPT_CATEGORY on (PROD_DEPT_CAT.DEPT_ID = DEPT_CATEGORY.DEPT_ID AND PROD_DEPT_CAT.CAT_ID = DEPT_CATEGORY.CATH_ID )
        INNER JOIN CATEGORY_VALUE ON (PROD_DEPT_CAT.CAT_VAL_ID = CATEGORY_VALUE.CATV_ID)
        INNER JOIN CATEGORY_HEADING on (PROD_DEPT_CAT.CAT_ID = CATEGORY_HEADING.CATH_ID)
        INNER JOIN DEPARTMENT ON (PROD_DEPT_CAT.DEPT_ID = DEPARTMENT.DEPT_ID)

        ) PRODUCT_GROUP on (PRODUCT.PROD_ID = PRODUCT_GROUP.PROD_ID)
        ,
        (select Default_GRADE_RATE, A_GRADE_RATE, B_GRADE_RATE, C_GRADE_RATE, D_GRADE_RATE

        from
        (
        select GRADE_CODE + '_GRADE_RATE' GRADE_CODE, RATE
        FROM CUSTOMER_GRADE
        ) grade

        pivot
        (
        max(rate)
        for GRADE_CODE in (A_GRADE_RATE,B_GRADE_RATE,C_GRADE_RATE,D_GRADE_RATE,Default_GRADE_RATE)
        )piv
        ) GRADE_RATE,

        (
        select Default_GRADE, A_GRADE, B_GRADE, C_GRADE, D_GRADE

        from
        (
        select GRADE_CODE + '_GRADE' GRADE_CODE, DESCRIPTION
        FROM CUSTOMER_GRADE
        ) grade

        pivot
        (
        max(DESCRIPTION)
        for GRADE_CODE in (A_GRADE,B_GRADE,C_GRADE,D_GRADE,Default_GRADE)
        )piv
        ) GRADE_FORMULA
        where SUPP_ORGU_LINK.ORGU_ID = #{param1}
        <if test="param2 != null">
            AND
            <foreach collection="param2" item="item" index="index"
                     open ="(" separator=" AND " close=")">
                ${item.column} ${item.operator} ${item.value}
            </foreach>
        </if>
        ) QUERY1
        ) AS SourceTable	  PIVOT ( MAX ([CAT_VALUE]) FOR [CATH_TYPE_CONST] IN ([PROD_CAT_1],[PROD_CAT_2],[PROD_CAT_3])) AS PivotTable
        <if test="param3 != null">
            ORDER BY
            <foreach collection="param3" item="item" index="index"
                     open =" " separator="," close=" ">
                ${item.value}
            </foreach>
        </if>
    </select>
    <select id="runRptGoodsReceived" resultMap="reportGoodsReceivedMap" >
select
	DELIVERY_NOTE_HEADER.DELN_ID delnId,
	DELIVERY_NOTE_HEADER.DELN_NOTE_NUMBER delnNoteNo,
	SUPPLIER.SUPPLIER_NAME supplierName,
	DELIVERY_NOTE_HEADER.DELN_CREATED_DATE delnCreatedDate,
	DELIVERY_NOTE_HEADER.DELN_DELIVERY_DATE delnDeliveryDate,
	DELIVERY_NOTE_HEADER.DELN_VALUE_GROSS delnValueGross,
	DELIVERY_NOTE_HEADER.DELN_VALUE_NETT delnValueNett,
	DELIVERY_NOTE_HEADER.DELN_STATUS delnStatus,
	DELIVERY_NOTE_HEADER.FREIGHT_TAX_CODE freightTaxCode,
	DELIVERY_NOTE_HEADER.FREIGHT_TAX freightTax,
	DELIVERY_NOTE_HEADER.FREIGHT_AMOUNT freightAmount,
	DELIVERY_NOTE_HEADER.DELN_SURCHARGE delnSurcharge,
	spp.CATALOGUE_NO catalogueNo,
	spp.PART_NO partNo,
	DELIVERY_NOTE_LINE.DLNL_UNIT_COST dlnlUnitCost,
	DELIVERY_NOTE_LINE.DLNL_QTY dlnlQty,
	tlv.TXLV_CODE taxCode,
	DELIVERY_NOTE_LINE.DLNL_VALUE_TAX dlnlValueTax,
	DELIVERY_NOTE_LINE.DLNL_VALUE_GROSS dlnlValueGross,
	DELIVERY_NOTE_LINE.TOTAL_COST totalCost
	--DELIVERY_NOTE_LINE.
 from  DELIVERY_NOTE_HEADER
	   inner join DELIVERY_NOTE_LINE  on (DELIVERY_NOTE_HEADER.DELN_ID = DELIVERY_NOTE_LINE.DELN_ID)
	   inner join CONFIG_CATEGORY cc on (DELIVERY_NOTE_HEADER.DELN_STATUS = cc.CATEGORY_ID and cc.CATEGORY_CODE = 'DLV_NOTE_STATUS_COMPLETE')
	   inner join SUPPLIER SUPPLIER on (DELIVERY_NOTE_HEADER.SUPPLIER_ID = SUPPLIER.SUPPLIER_ID)
	   inner join SUPP_PROD_PRICE spp on (DELIVERY_NOTE_LINE.SPRC_ID = spp.SPRC_ID)
	   inner join PRODUCT prd on (spp.PROD_ID = prd.PROD_ID)
	   inner join TAX_LEG_VARIANCE tlv on (DELIVERY_NOTE_LINE.TXLV_ID = tlv.TXLV_ID)
        where DELIVERY_NOTE_HEADER.ORGU_ID = #{param1}
        <if test="param2 != null">
            AND
            <foreach collection="param2" item="item" index="index"
                     open ="(" separator=" AND " close=")">
                ${item.column} ${item.operator} ${item.value}
            </foreach>
        </if>
	   order by supplierName, delnId
    </select>
</mapper>