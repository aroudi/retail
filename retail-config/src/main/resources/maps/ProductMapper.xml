<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="au.com.biztune.retail.dao.ProductDao">
    <!-- result maps -->
    <resultMap id="productDetailMap" type="Product" >
        <id column="PROD_ID" property="id" />
        <result column="PROD_SKU" property="prodSku" />
        <result column="PROD_BARCODE" property="prodBarcode" />
        <result column="REFERENCE" property="reference" />
        <result column="ORGU_ID_OWNING" property="orguIdOwning" />
        <result column="PROD_NAME" property="prodName" />
        <result column="PROD_DESC" property="prodDesc" />
        <result column="PROD_OWN_BRAND" property="prodOwnBrand" />
        <result column="PROD_URL" property="prodUrl" />
        <result column="PROD_CREATED" property="prodCreated" />
        <result column="PROD_MODIFIED" property="prodModified" />
        <result column="PROD_RECEIPT_DESC" property="prodReceiptDesc" />
        <result column="PROD_WARRANTY_TERM" property="prodWarrantyTerm" />
        <result column="PROD_BRAND" property="prodBrand" />
        <result column="PROD_IMAGE_DESC" property="prodImageDesc" />
        <result column="PROD_URL_THUMB" property="prodUrlThumb" />
        <result column="PROD_CLASS" property="prodClass" />
        <result column="PROD_WARRANTY_TEXT" property="prodWarrantyText" />
        <result column="PROD_LOCATION" property="prodLocation" />
        <association property="stockQty" column="{prodId=PROD_ID, orguId=ORGU_ID_OWNING}" select="au.com.biztune.retail.dao.StockDao.getProductSaleablePristineStockQty" />
        <association property="prodType" column="CAT_ID_TYPE" select="au.com.biztune.retail.dao.ConfigCategoryDao.getCategoryById" />
        <association resultMap="prodOrguLinkDetailMap" property="prodOrguLink" />
        <collection property="priceList" javaType="ArrayList" column="PROD_ID" ofType="Price" select="au.com.biztune.retail.dao.PriceDao.getAllProductPrice"/>
        <collection property="suppProdPriceList" javaType="ArrayList" column="PROD_ID" ofType="SuppProdPrice" select="au.com.biztune.retail.dao.SuppProdPriceDao.getAllSuppProdPricesByProdId"/>
        <collection property="productGroups" javaType="ArrayList" column="PROD_ID" ofType="ProdDeptCat" select="au.com.biztune.retail.dao.ProductCategoryDao.getProdDeptCatByProdId"/>
    </resultMap>

    <resultMap id="prodOrguLinkDetailMap" type="ProdOrguLink" >
        <id column="PROU_ID" property="id" />
        <result column="PROD_ID" property="prodId" />
        <result column="ORGU_ID" property="orguId" />
        <result column="PROU_REFUNDABLE" property="prouRefundable" />
        <result column="PROU_DISCOUNTABLE" property="prouDiscountable" />
        <result column="PROU_CAN_QTY_SALE" property="prouCanQtySale" />
        <result column="PROU_FORCE_QTY" property="prouForceQty" />
        <result column="PROU_REFUND_DAYS" property="prouRefundDays" />
        <!--association property="status" column="CAT_ID_STATUS" select="au.com.biztune.retail.dao.ConfigCategoryDao.getCategoryById" /-->
        <association resultMap="au.com.biztune.retail.dao.ConfigCategoryDao.configCategoryMap" property="status" />
        <collection property="taxRules" javaType="ArrayList" column="PROU_ID" ofType="TaxRule" select="au.com.biztune.retail.dao.TaxRuleDao.getTaxRulesOfProduct"/>
    </resultMap>


    <resultMap id="productListMap" type="Product" >
        <id column="PROD_ID" property="id" />
        <result column="PROD_SKU" property="prodSku" />
        <result column="PROD_BARCODE" property="prodBarcode" />
        <result column="REFERENCE" property="reference" />
        <result column="ORGU_ID_OWNING" property="orguIdOwning" />
        <result column="PROD_NAME" property="prodName" />
        <result column="PROD_DESC" property="prodDesc" />
        <result column="PROD_OWN_BRAND" property="prodOwnBrand" />
        <result column="PROD_URL" property="prodUrl" />
        <result column="PROD_CREATED" property="prodCreated" />
        <result column="PROD_MODIFIED" property="prodModified" />
        <result column="PROD_RECEIPT_DESC" property="prodReceiptDesc" />
        <result column="PROD_WARRANTY_TERM" property="prodWarrantyTerm" />
        <result column="PROD_BRAND" property="prodBrand" />
        <result column="PROD_IMAGE_DESC" property="prodImageDesc" />
        <result column="PROD_URL_THUMB" property="prodUrlThumb" />
        <result column="PROD_CLASS" property="prodClass" />
        <result column="PROD_WARRANTY_TEXT" property="prodWarrantyText" />
        <result column="PROD_LOCATION" property="prodLocation" />
        <association property="sellPrice" column="PROD_ID" select="au.com.biztune.retail.dao.PriceDao.getProductSellPricePerProdId" />
        <association property="stockQty" column="{prodId=PROD_ID, orguId=ORGU_ID_OWNING}" select="au.com.biztune.retail.dao.StockDao.getProductSaleablePristineStockQty" />
        <association property="reservedQty" column="{prodId=PROD_ID, orguId=ORGU_ID_OWNING}" select="au.com.biztune.retail.dao.StockDao.getProductReservedPristineStockQty" />
        <association resultMap="prodOrguLinkListMap" property="prodOrguLink" />
    </resultMap>

    <resultMap id="productSearchMap" type="Product" >
        <id column="PROD_ID" property="id" />
        <result column="PROD_SKU" property="prodSku" />
        <result column="PROD_BARCODE" property="prodBarcode" />
        <result column="REFERENCE" property="reference" />
        <result column="ORGU_ID_OWNING" property="orguIdOwning" />
        <result column="PROD_NAME" property="prodName" />
        <result column="PROD_DESC" property="prodDesc" />
        <result column="PROD_OWN_BRAND" property="prodOwnBrand" />
        <result column="PROD_URL" property="prodUrl" />
        <result column="PROD_CREATED" property="prodCreated" />
        <result column="PROD_MODIFIED" property="prodModified" />
        <result column="PROD_RECEIPT_DESC" property="prodReceiptDesc" />
        <result column="PROD_WARRANTY_TERM" property="prodWarrantyTerm" />
        <result column="PROD_BRAND" property="prodBrand" />
        <result column="PROD_IMAGE_DESC" property="prodImageDesc" />
        <result column="PROD_URL_THUMB" property="prodUrlThumb" />
        <result column="PROD_CLASS" property="prodClass" />
        <result column="PROD_WARRANTY_TEXT" property="prodWarrantyText" />
        <result column="PROD_LOCATION" property="prodLocation" />
        <result column="STCK_QTY" property="stockQty" />
        <association property="sellPrice" column="PROD_ID" select="au.com.biztune.retail.dao.PriceDao.getProductSellPricePerProdId" />
        <association property="reservedQty" column="{prodId=PROD_ID, orguId=ORGU_ID_OWNING}" select="au.com.biztune.retail.dao.StockDao.getProductReservedPristineStockQty" />
        <association resultMap="prodOrguLinkListMap" property="prodOrguLink" />
    </resultMap>

    <resultMap id="productExtendedSearchMap" type="ProductExtended" >
        <id property="id" column="prodId" />
        <result property="prodSku" column="prodSku" />
        <result property="prodBarcode" column="prodBarcode" />
        <result property="prodRef" column="reference" />
        <result property="prodName" column="prodName" />
        <result property="qtyAvailable" column="qtyAvailable" />
        <result property="defaultSupplierId" column="supplierId" />
        <result property="defaultSupplierName" column="supplierName" />
        <result property="rrp" column="rrp" />
        <result property="prodCost" column="prodCost" />
        <result property="gradeAPrice" column="aGrade" />
        <result property="gradeBPrice" column="bGrade" />
        <result property="gradeCPrice" column="cGrade" />
        <result property="gradeDPrice" column="dGrade" />
        <result property="defaultPrice" column="defaultGrade" />
        <result property="department" column="deptName" />
        <result property="category1" column="prodCat1" />
        <result property="category2" column="prodCat2" />
        <result property="category3" column="prodCat3" />
    </resultMap>
    <resultMap id="productListLiteMap" type="Product" >
        <id column="PROD_ID" property="id" />
        <result column="PROD_SKU" property="prodSku" />
        <result column="PROD_BARCODE" property="prodBarcode" />
        <result column="REFERENCE" property="reference" />
        <result column="ORGU_ID_OWNING" property="orguIdOwning" />
        <result column="PROD_NAME" property="prodName" />
        <result column="PROD_DESC" property="prodDesc" />
        <result column="PROD_OWN_BRAND" property="prodOwnBrand" />
        <result column="PROD_URL" property="prodUrl" />
        <result column="PROD_CREATED" property="prodCreated" />
        <result column="PROD_MODIFIED" property="prodModified" />
        <result column="PROD_RECEIPT_DESC" property="prodReceiptDesc" />
        <result column="PROD_WARRANTY_TERM" property="prodWarrantyTerm" />
        <result column="PROD_BRAND" property="prodBrand" />
        <result column="PROD_IMAGE_DESC" property="prodImageDesc" />
        <result column="PROD_URL_THUMB" property="prodUrlThumb" />
        <result column="PROD_CLASS" property="prodClass" />
        <result column="PROD_WARRANTY_TEXT" property="prodWarrantyText" />
        <result column="PROD_LOCATION" property="prodLocation" />
        <association resultMap="prodOrguLinkListMap" property="prodOrguLink" />
    </resultMap>

    <resultMap id="productCheckLiteMap" type="Product" >
        <id column="PROD_ID" property="id" />
        <result column="PROD_SKU" property="prodSku" />
        <result column="PROD_BARCODE" property="prodBarcode" />
        <result column="REFERENCE" property="reference" />
        <result column="ORGU_ID_OWNING" property="orguIdOwning" />
        <result column="PROD_NAME" property="prodName" />
        <result column="PROD_DESC" property="prodDesc" />
        <result column="PROD_OWN_BRAND" property="prodOwnBrand" />
        <result column="PROD_URL" property="prodUrl" />
        <result column="PROD_CREATED" property="prodCreated" />
        <result column="PROD_MODIFIED" property="prodModified" />
        <result column="PROD_RECEIPT_DESC" property="prodReceiptDesc" />
        <result column="PROD_WARRANTY_TERM" property="prodWarrantyTerm" />
        <result column="PROD_BRAND" property="prodBrand" />
        <result column="PROD_IMAGE_DESC" property="prodImageDesc" />
        <result column="PROD_URL_THUMB" property="prodUrlThumb" />
        <result column="PROD_CLASS" property="prodClass" />
        <result column="PROD_WARRANTY_TEXT" property="prodWarrantyText" />
        <result column="PROD_LOCATION" property="prodLocation" />
    </resultMap>

    <resultMap id="prodOrguLinkListMap" type="ProdOrguLink" >
        <id column="PROU_ID" property="id" />
        <result column="PROD_ID" property="prodId" />
        <result column="ORGU_ID" property="orguId" />
        <result column="PROU_REFUNDABLE" property="prouRefundable" />
        <result column="PROU_DISCOUNTABLE" property="prouDiscountable" />
        <result column="PROU_CAN_QTY_SALE" property="prouCanQtySale" />
        <result column="PROU_FORCE_QTY" property="prouForceQty" />
        <result column="PROU_REFUND_DAYS" property="prouRefundDays" />
        <!--association property="status" column="CAT_ID_STATUS" select="au.com.biztune.retail.dao.ConfigCategoryDao.getCategoryById" /-->
        <association resultMap="au.com.biztune.retail.dao.ConfigCategoryDao.configCategoryMap" property="status" />
    </resultMap>

    <resultMap id="productSaleItemMap" type="ProductSaleItem" >
        <id column="PROD_ID" property="id" />
        <result column="PROD_SKU" property="prodSku" />
        <result column="PROD_BARCODE" property="prodBarcode" />
        <result column="REFERENCE" property="reference" />
        <result column="ORGU_ID_OWNING" property="orguIdOwning" />
        <result column="PROD_NAME" property="prodName" />
        <result column="PROD_DESC" property="prodDesc" />
        <result column="PROD_OWN_BRAND" property="prodOwnBrand" />
        <result column="PROD_URL" property="prodUrl" />
        <result column="PROD_CREATED" property="prodCreated" />
        <result column="PROD_MODIFIED" property="prodModified" />
        <result column="PROD_RECEIPT_DESC" property="prodReceiptDesc" />
        <result column="PROD_WARRANTY_TERM" property="prodWarrantyTerm" />
        <result column="PROD_BRAND" property="prodBrand" />
        <result column="PROD_IMAGE_DESC" property="prodImageDesc" />
        <result column="PROD_URL_THUMB" property="prodUrlThumb" />
        <result column="PROD_CLASS" property="prodClass" />
        <result column="PROD_WARRANTY_TEXT" property="prodWarrantyText" />
        <association property="stockQty" column="{prodId=PROD_ID, orguId=ORGU_ID_OWNING}" select="au.com.biztune.retail.dao.StockDao.getProductSaleablePristineStockQty" />
        <association resultMap="prodOrguLinkDetailMap" property="prodOrguLink" />
        <association property="sellPrice" column="PROD_ID" select="au.com.biztune.retail.dao.PriceDao.getProductSellPricePerProdId" />
        <association property="costPrice" column="PROD_ID" select="au.com.biztune.retail.dao.PriceDao.getProductCostPricePerProdId" />
    </resultMap>

    <resultMap id="productSaleItemLiteMap" type="ProductSaleItem" >
        <id column="PROD_ID" property="id" />
        <result column="PROD_SKU" property="prodSku" />
        <result column="REFERENCE" property="reference" />
        <result column="PROD_NAME" property="prodName" />
    </resultMap>

    <sql id="productColumns">
        ${alias}.PROD_ID,
        ${alias}.PROD_SKU,
        ${alias}.PROD_BARCODE,
        ${alias}.REFERENCE,
        ${alias}.ORGU_ID_OWNING,
        ${alias}.PROD_NAME,
        ${alias}.PROD_DESC,
        ${alias}.PROD_OWN_BRAND,
        ${alias}.PROD_URL,
        ${alias}.PROD_CREATED,
        ${alias}.PROD_MODIFIED,
        ${alias}.PROD_RECEIPT_DESC,
        ${alias}.PROD_WARRANTY_TERM,
        ${alias}.PROD_BRAND,
        ${alias}.PROD_IMAGE_DESC,
        ${alias}.PROD_URL_THUMB,
        ${alias}.PROD_CLASS,
        ${alias}.PROD_WARRANTY_TEXT,
        ${alias}.PROD_LOCATION,
        ${alias}.CAT_ID_TYPE
    </sql>


    <sql id="prodOrguLinkColumns">
        ${alias}.PROU_ID,
        <!--${alias}.PROD_ID,-->
        ${alias}.ORGU_ID,
        ${alias}.PROU_REFUNDABLE,
        ${alias}.PROU_DISCOUNTABLE,
        ${alias}.PROU_CAN_QTY_SALE,
        ${alias}.PROU_FORCE_QTY,
        ${alias}.PROU_REFUND_DAYS
    </sql>


    <!--select id="getAllProductsPerOrgUnitId" resultMap="productListMap" >
        SELECT
            <include refid="productColumns"><property name="alias" value="prod"/></include>,
            <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>,
            <include refid="au.com.biztune.retail.dao.ConfigCategoryDao.configCategoryColumns"><property name="alias" value="prodStatus"/></include>
        FROM
          PRODUCT prod
        INNER JOIN PROD_ORGU_LINK prou ON (prod.prod_id = prou.prod_id)
        LEFT OUTER JOIN
          CONFIG_CATEGORY prodStatus on (prou.CAT_ID_STATUS = prodStatus.CATEGORY_ID)
        WHERE prou.orgu_id = #{value}
    </select -->

    <select id="getAllProductsPerOrgUnitId" resultMap="productListLiteMap" >
        SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>,
        <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>,
        <include refid="au.com.biztune.retail.dao.ConfigCategoryDao.configCategoryColumns"><property name="alias" value="cat"/></include>
        FROM
        PRODUCT prod
        INNER JOIN PROD_ORGU_LINK prou ON (prod.prod_id = prou.prod_id)
        INNER JOIN CONFIG_CATEGORY cat on (cat.CATEGORY_ID=  prou.CAT_ID_STATUS)
        WHERE prou.orgu_id = #{value} and prod.DELETED = 0
    </select>

    <select id="getAllProductsPerOrgUnitIdPaging" resultMap="productListMap" >
        select * from
        (SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>,
        <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>,
        <include refid="au.com.biztune.retail.dao.ConfigCategoryDao.configCategoryColumns"><property name="alias" value="cat"/></include>,
        ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS NUMBER
        FROM PRODUCT
        INNER JOIN PROD_ORGU_LINK  ON (PRODUCT.prod_id = PROD_ORGU_LINK.prod_id)
        INNER JOIN CONFIG_CATEGORY  on (CONFIG_CATEGORY.CATEGORY_ID= PROD_ORGU_LINK.CAT_ID_STATUS)
        WHERE PROD_ORGU_LINK.orgu_id = #{param1} and PRODUCT.DELETED = 0
        ) q_result
        where q_result.NUMBER BETWEEN #{param2} AND #{param3}
    </select>

    <select id="getAllProductExtendedPerOrgUnitIdPaging" resultMap="productExtendedSearchMap" >
        SELECT *
        FROM
        (
        SELECT * ,
        PROD_CAT_1 prodCat1,
        PROD_CAT_2 prodCat2,
        PROD_CAT_3 prodCat3,
        ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS NUMBER

        FROM
        (
        SELECT
        prodId,
        prodSku,
        prodBarcode,
        prodName,
        prodRef,
        prodDesc,
        supplierId,
        supplierName,
        prodCost,
        rrp,
        qtyAvailable,
        deptName,
        [CATH_TYPE_CONST],
        [CAT_VALUE],
        Default_GRADE,
        A_GRADE,
        B_GRADE,
        C_GRADE,
        D_GRADE,
        Default_GRADE_RATE,
        A_GRADE_RATE,
        B_GRADE_RATE,
        C_GRADE_RATE,
        D_GRADE_RATE,
        defaultGrade =
        CASE Default_GRADE
        WHEN 'Cost + %' THEN prodCost + Default_GRADE_RATE*prodCost
        WHEN 'Cost + $' THEN prodCost + Default_GRADE_RATE
        WHEN 'Fixed $' THEN Default_GRADE_RATE
        WHEN 'RRP - %' THEN rrp - rrp*Default_GRADE_RATE
        WHEN 'RRP - $' THEN rrp - Default_GRADE_RATE
        ELSE 0
        END,
        aGrade =
        CASE A_GRADE
        WHEN 'Cost + %' THEN prodCost + A_GRADE_RATE*prodCost
        WHEN 'Cost + $' THEN prodCost + A_GRADE_RATE
        WHEN 'Fixed $' THEN A_GRADE_RATE
        WHEN 'RRP - %' THEN rrp - rrp*A_GRADE_RATE
        WHEN 'RRP - $' THEN rrp - A_GRADE_RATE
        ELSE 0
        END,
        bGrade =
        CASE B_GRADE
        WHEN 'Cost + %' THEN prodCost + B_GRADE_RATE*prodCost
        WHEN 'Cost + $' THEN prodCost + B_GRADE_RATE
        WHEN 'Fixed $' THEN B_GRADE_RATE
        WHEN 'RRP - %' THEN rrp - rrp*B_GRADE_RATE
        WHEN 'RRP - $' THEN rrp - B_GRADE_RATE
        ELSE 0
        END,
        cGrade =
        CASE C_GRADE
        WHEN 'Cost + %' THEN prodCost + C_GRADE_RATE*prodCost
        WHEN 'Cost + $' THEN prodCost + C_GRADE_RATE
        WHEN 'Fixed $' THEN C_GRADE_RATE
        WHEN 'RRP - %' THEN rrp - rrp*C_GRADE_RATE
        WHEN 'RRP - $' THEN rrp - C_GRADE_RATE
        ELSE 0
        END,
        dGrade =
        CASE D_GRADE
        WHEN 'Cost + %' THEN prodCost + D_GRADE_RATE*prodCost
        WHEN 'Cost + $' THEN prodCost + D_GRADE_RATE
        WHEN 'Fixed $' THEN D_GRADE_RATE
        WHEN 'RRP - %' THEN rrp - rrp*D_GRADE_RATE
        WHEN 'RRP - $' THEN rrp - D_GRADE_RATE
        ELSE 0
        END

        FROM
        (
        select
        PRODUCT.PROD_ID prodId,
        product.PROD_SKU prodSku,
        product.PROD_BARCODE prodBarcode,
        product.PROD_NAME prodName,
        product.REFERENCE prodRef,
        PRODUCT.PROD_DESC prodDesc,
        costPrice.PRCE_PRICE prodCost,
        rrpPrice.PRCE_PRICE rrp,
        PRODUCT_GROUP.DEPT_NAME deptName,
        PRODUCT_GROUP.CATH_TYPE_CONST,
        PRODUCT_GROUP.CATH_NAME,
        PRODUCT_GROUP.CAT_VALUE,
        supplier.SUPPLIER_ID supplierId,
        supplier.SUPPLIER_NAME supplierName,
        STOCK.STCK_QTY qtyAvailable,
        PRODUCT_GROUP.CAT_VAL_ID,
        GRADE_RATE.*,
        GRADE_FORMULA.*

        from PRODUCT
        inner join PROD_ORGU_LINK ON (PRODUCT.PROD_ID = PROD_ORGU_LINK.PROD_ID)
        left outer join SUPP_PROD_PRICE supp_prod_price on (supp_prod_price.PROD_ID = product.PROD_ID and supp_prod_price.SPRC_PREFER_BUY = 1)
        left outer join SUPP_ORGU_LINK supp_orgu_link on (supp_prod_price.SOL_ID = supp_orgu_link.SOL_ID)
        left outer join SUPPLIER supplier on (supplier.SUPPLIER_ID = supp_orgu_link.SUPP_ID)
        left outer join PRICE rrpPrice on (rrpPrice.PROD_ID = PRODUCT.PROD_ID)
        inner join PRICE_CODE rrpPriceCode on (rrpPriceCode.PRCC_ID = rrpPrice.PRCC_ID and rrpPriceCode.PRCC_CODE = 'SELL_PRICE')
        left outer join PRICE costPrice on (costPrice.PROD_ID = PRODUCT.PROD_ID)
        inner join  PRICE_CODE costPriceCode on (costPriceCode.PRCC_ID = costPrice.PRCC_ID and costPriceCode.PRCC_CODE = 'COST_PRICE')
        left outer join STOCK on (	stock.PROD_ID = PRODUCT.PROD_ID)
        left outer JOIN CONFIG_CATEGORY cc1 on (stock.STCK_COND = cc1.category_id and cc1.CATEGORY_CODE = 'STOCK_CONDITION_PRISTINE')
        left outer JOIN CONFIG_CATEGORY cc2 on (stock.STCK_CAT = cc2.category_id AND cc2.CATEGORY_CODE = 'STOCK_CATEGORY_SALEABLE')
        left outer join
        (
        select
        prod_id,
        DEPARTMENT.DEPT_NAME,
        DEPT_CATEGORY.CATH_TYPE_CONST,
        CATEGORY_HEADING.CATH_NAME,
        CATEGORY_VALUE.CAT_VALUE,
        PROD_DEPT_CAT.CAT_VAL_ID
        from
        PROD_DEPT_CAT inner join DEPT_CATEGORY on (PROD_DEPT_CAT.DEPT_ID = DEPT_CATEGORY.DEPT_ID AND PROD_DEPT_CAT.CAT_ID = DEPT_CATEGORY.CATH_ID )
        INNER JOIN CATEGORY_VALUE ON (PROD_DEPT_CAT.CAT_VAL_ID = CATEGORY_VALUE.CATV_ID)
        INNER JOIN CATEGORY_HEADING on (PROD_DEPT_CAT.CAT_ID = CATEGORY_HEADING.CATH_ID)
        INNER JOIN DEPARTMENT ON (PROD_DEPT_CAT.DEPT_ID = DEPARTMENT.DEPT_ID)

        ) PRODUCT_GROUP on (PRODUCT.PROD_ID = PRODUCT_GROUP.PROD_ID)
        ,
        (select Default_GRADE_RATE, A_GRADE_RATE, B_GRADE_RATE, C_GRADE_RATE, D_GRADE_RATE

        from
        (
        select GRADE_CODE + '_GRADE_RATE' GRADE_CODE, RATE
        FROM CUSTOMER_GRADE
        ) grade

        pivot
        (
        max(rate)
        for GRADE_CODE in (A_GRADE_RATE,B_GRADE_RATE,C_GRADE_RATE,D_GRADE_RATE,Default_GRADE_RATE)
        )piv
        ) GRADE_RATE,

        (
        select Default_GRADE, A_GRADE, B_GRADE, C_GRADE, D_GRADE

        from
        (
        select GRADE_CODE + '_GRADE' GRADE_CODE, DESCRIPTION
        FROM CUSTOMER_GRADE
        ) grade

        pivot
        (
        max(DESCRIPTION)
        for GRADE_CODE in (A_GRADE,B_GRADE,C_GRADE,D_GRADE,Default_GRADE)
        )piv
        ) GRADE_FORMULA
        where SUPP_ORGU_LINK.ORGU_ID = 1 and PRODUCT.DELETED = 0
        ) QUERY1
        ) AS SourceTable	  PIVOT ( MAX ([CAT_VALUE]) FOR [CATH_TYPE_CONST] IN ([PROD_CAT_1],[PROD_CAT_2],[PROD_CAT_3])) AS PivotTable
        )q_result
        where  q_result.NUMBER BETWEEN #{param2} AND #{param3}
    </select>

    <select id="searchProductsPaging" resultMap="productSearchMap" >
        SELECT * FROM
        (SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>,
        <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>,
        <include refid="au.com.biztune.retail.dao.ConfigCategoryDao.configCategoryColumns"><property name="alias" value="cat"/></include>,
        stock.STCK_QTY,
        ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS NUMBER
        FROM PRODUCT
        INNER JOIN PROD_ORGU_LINK  ON (PRODUCT.prod_id = PROD_ORGU_LINK.prod_id)
        INNER JOIN CONFIG_CATEGORY  on (CONFIG_CATEGORY.CATEGORY_ID = PROD_ORGU_LINK.CAT_ID_STATUS)
        LEFT OUTER JOIN SUPP_PROD_PRICE  on (PRODUCT.PROD_ID = SUPP_PROD_PRICE.PROD_ID)
        LEFT OUTER JOIN SUPP_ORGU_LINK  on (SUPP_ORGU_LINK.SOL_ID = SUPP_PROD_PRICE.SOL_ID)
        LEFT OUTER JOIN  (select stck.* from STOCK stck
                            inner JOIN CONFIG_CATEGORY cat2 on (cat2.CATEGORY_ID = stck.STCK_CAT AND cat2.CATEGORY_CODE = 'STOCK_CATEGORY_SALEABLE')
                         ) STOCK on (prod.prod_id = stock.prod_id)
        WHERE PROD_ORGU_LINK.orgu_id = #{param1} AND PRODUCT.DELETED = 0
            <if test="param4 != null">
                AND
                <foreach collection="param4" item="item" index="index"
                         open ="(" separator=" AND " close=")">
                    ${item.column} ${item.operator} #{item.value}
                </foreach>
            </if>
        )q_result
        where  q_result.NUMBER BETWEEN #{param2} AND #{param3}
    </select>

    <select id="searchProductsExtendedPaging" resultMap="productExtendedSearchMap" >
        SELECT *
        FROM
        (
        SELECT * ,
        PROD_CAT_1 prodCat1,
        PROD_CAT_2 prodCat2,
        PROD_CAT_3 prodCat3,
        ROW_NUMBER() OVER (ORDER BY (SELECT 100)) AS NUMBER

        FROM
        (
        SELECT
        prodId,
        prodSku,
        prodBarcode,
        prodName,
        prodRef,
        prodDesc,
        supplierId,
        supplierName,
        prodCost,
        rrp,
        qtyAvailable,
        deptName,
        [CATH_TYPE_CONST],
        [CAT_VALUE],
        Default_GRADE,
        A_GRADE,
        B_GRADE,
        C_GRADE,
        D_GRADE,
        Default_GRADE_RATE,
        A_GRADE_RATE,
        B_GRADE_RATE,
        C_GRADE_RATE,
        D_GRADE_RATE,
        defaultGrade =
        CASE Default_GRADE
        WHEN 'Cost + %' THEN prodCost + Default_GRADE_RATE*prodCost
        WHEN 'Cost + $' THEN prodCost + Default_GRADE_RATE
        WHEN 'Fixed $' THEN Default_GRADE_RATE
        WHEN 'RRP - %' THEN rrp - rrp*Default_GRADE_RATE
        WHEN 'RRP - $' THEN rrp - Default_GRADE_RATE
        ELSE 0
        END,
        aGrade =
        CASE A_GRADE
        WHEN 'Cost + %' THEN prodCost + A_GRADE_RATE*prodCost
        WHEN 'Cost + $' THEN prodCost + A_GRADE_RATE
        WHEN 'Fixed $' THEN A_GRADE_RATE
        WHEN 'RRP - %' THEN rrp - rrp*A_GRADE_RATE
        WHEN 'RRP - $' THEN rrp - A_GRADE_RATE
        ELSE 0
        END,
        bGrade =
        CASE B_GRADE
        WHEN 'Cost + %' THEN prodCost + B_GRADE_RATE*prodCost
        WHEN 'Cost + $' THEN prodCost + B_GRADE_RATE
        WHEN 'Fixed $' THEN B_GRADE_RATE
        WHEN 'RRP - %' THEN rrp - rrp*B_GRADE_RATE
        WHEN 'RRP - $' THEN rrp - B_GRADE_RATE
        ELSE 0
        END,
        cGrade =
        CASE C_GRADE
        WHEN 'Cost + %' THEN prodCost + C_GRADE_RATE*prodCost
        WHEN 'Cost + $' THEN prodCost + C_GRADE_RATE
        WHEN 'Fixed $' THEN C_GRADE_RATE
        WHEN 'RRP - %' THEN rrp - rrp*C_GRADE_RATE
        WHEN 'RRP - $' THEN rrp - C_GRADE_RATE
        ELSE 0
        END,
        dGrade =
        CASE D_GRADE
        WHEN 'Cost + %' THEN prodCost + D_GRADE_RATE*prodCost
        WHEN 'Cost + $' THEN prodCost + D_GRADE_RATE
        WHEN 'Fixed $' THEN D_GRADE_RATE
        WHEN 'RRP - %' THEN rrp - rrp*D_GRADE_RATE
        WHEN 'RRP - $' THEN rrp - D_GRADE_RATE
        ELSE 0
        END

        FROM
        (
        select
        PRODUCT.PROD_ID prodId,
        product.PROD_SKU prodSku,
        product.PROD_BARCODE prodBarcode,
        product.PROD_NAME prodName,
        product.REFERENCE prodRef,
        product.PROD_DESC prodDesc,
        costPrice.PRCE_PRICE prodCost,
        rrpPrice.PRCE_PRICE rrp,
        PRODUCT_GROUP.DEPT_NAME deptName,
        PRODUCT_GROUP.CATH_TYPE_CONST,
        PRODUCT_GROUP.CATH_NAME,
        PRODUCT_GROUP.CAT_VALUE,
        supplier.SUPPLIER_ID supplierId,
        supplier.SUPPLIER_NAME supplierName,
        STOCK.STCK_QTY qtyAvailable,
        PRODUCT_GROUP.CAT_VAL_ID,
        GRADE_RATE.*,
        GRADE_FORMULA.*

        from PRODUCT
        inner join PROD_ORGU_LINK ON (PRODUCT.PROD_ID = PROD_ORGU_LINK.PROD_ID)
        left outer join SUPP_PROD_PRICE supp_prod_price on (supp_prod_price.PROD_ID = product.PROD_ID and supp_prod_price.SPRC_PREFER_BUY = 1)
        left outer join SUPP_ORGU_LINK supp_orgu_link on (supp_prod_price.SOL_ID = supp_orgu_link.SOL_ID)
        left outer join SUPPLIER supplier on (supplier.SUPPLIER_ID = supp_orgu_link.SUPP_ID)
        left outer join PRICE rrpPrice on (rrpPrice.PROD_ID = PRODUCT.PROD_ID)
        inner join PRICE_CODE rrpPriceCode on (rrpPriceCode.PRCC_ID = rrpPrice.PRCC_ID and rrpPriceCode.PRCC_CODE = 'SELL_PRICE')
        left outer join PRICE costPrice on (costPrice.PROD_ID = PRODUCT.PROD_ID)
        inner join  PRICE_CODE costPriceCode on (costPriceCode.PRCC_ID = costPrice.PRCC_ID and costPriceCode.PRCC_CODE = 'COST_PRICE')
        left outer join STOCK on (	stock.PROD_ID = PRODUCT.PROD_ID)
        left outer JOIN CONFIG_CATEGORY cc1 on (stock.STCK_COND = cc1.category_id and cc1.CATEGORY_CODE = 'STOCK_CONDITION_PRISTINE')
        left outer JOIN CONFIG_CATEGORY cc2 on (stock.STCK_CAT = cc2.category_id AND cc2.CATEGORY_CODE = 'STOCK_CATEGORY_SALEABLE')
        left outer join
        (
        select
        prod_id,
        DEPARTMENT.DEPT_NAME,
        DEPT_CATEGORY.CATH_TYPE_CONST,
        CATEGORY_HEADING.CATH_NAME,
        CATEGORY_VALUE.CAT_VALUE,
        PROD_DEPT_CAT.CAT_VAL_ID
        from
        PROD_DEPT_CAT inner join DEPT_CATEGORY on (PROD_DEPT_CAT.DEPT_ID = DEPT_CATEGORY.DEPT_ID AND PROD_DEPT_CAT.CAT_ID = DEPT_CATEGORY.CATH_ID )
        INNER JOIN CATEGORY_VALUE ON (PROD_DEPT_CAT.CAT_VAL_ID = CATEGORY_VALUE.CATV_ID)
        INNER JOIN CATEGORY_HEADING on (PROD_DEPT_CAT.CAT_ID = CATEGORY_HEADING.CATH_ID)
        INNER JOIN DEPARTMENT ON (PROD_DEPT_CAT.DEPT_ID = DEPARTMENT.DEPT_ID)

        ) PRODUCT_GROUP on (PRODUCT.PROD_ID = PRODUCT_GROUP.PROD_ID)
        ,
        (select Default_GRADE_RATE, A_GRADE_RATE, B_GRADE_RATE, C_GRADE_RATE, D_GRADE_RATE

        from
        (
        select GRADE_CODE + '_GRADE_RATE' GRADE_CODE, RATE
        FROM CUSTOMER_GRADE
        ) grade

        pivot
        (
        max(rate)
        for GRADE_CODE in (A_GRADE_RATE,B_GRADE_RATE,C_GRADE_RATE,D_GRADE_RATE,Default_GRADE_RATE)
        )piv
        ) GRADE_RATE,

        (
        select Default_GRADE, A_GRADE, B_GRADE, C_GRADE, D_GRADE

        from
        (
        select GRADE_CODE + '_GRADE' GRADE_CODE, DESCRIPTION
        FROM CUSTOMER_GRADE
        ) grade

        pivot
        (
        max(DESCRIPTION)
        for GRADE_CODE in (A_GRADE,B_GRADE,C_GRADE,D_GRADE,Default_GRADE)
        )piv
        ) GRADE_FORMULA
        where SUPP_ORGU_LINK.ORGU_ID = 1 and PRODUCT.DELETED = 0
        <if test="param4 != null">
            AND
            <foreach collection="param4" item="item" index="index"
                     open ="(" separator=" AND " close=")">
                ${item.column} ${item.operator} #{item.value}
            </foreach>
        </if>

        ) QUERY1
        ) AS SourceTable	  PIVOT ( MAX ([CAT_VALUE]) FOR [CATH_TYPE_CONST] IN ([PROD_CAT_1],[PROD_CAT_2],[PROD_CAT_3])) AS PivotTable
        )q_result
        where  q_result.NUMBER BETWEEN #{param2} AND #{param3}
    </select>

    <select id="getAllProductClass" resultType="string" >
        select distinct prod_class from PRODUCT order by PROD_CLASS
    </select>

    <select id="searchProductsTotalRecords" resultType="long" >
        SELECT
        count(*)
        FROM PRODUCT
        INNER JOIN PROD_ORGU_LINK ON (PRODUCT.prod_id = PROD_ORGU_LINK.prod_id)
        INNER JOIN CONFIG_CATEGORY  on (CONFIG_CATEGORY.CATEGORY_ID= PROD_ORGU_LINK.CAT_ID_STATUS)
        LEFT OUTER JOIN SUPP_PROD_PRICE  on (PRODUCT.PROD_ID = SUPP_PROD_PRICE.PROD_ID)
        LEFT OUTER JOIN SUPP_ORGU_LINK  on (SUPP_ORGU_LINK.SOL_ID = SUPP_PROD_PRICE.SOL_ID)
        LEFT OUTER JOIN STOCK  on (PRODUCT.prod_id = STOCK.prod_id)
        LEFT OUTER JOIN CONFIG_CATEGORY cat2 on (cat2.CATEGORY_ID = STOCK.STCK_CAT AND cat2.CATEGORY_CODE = 'STOCK_CATEGORY_SALEABLE')
        LEFT OUTER JOIN CONFIG_CATEGORY cat3 on (cat3.CATEGORY_ID = STOCK.STCK_COND and cat3.CATEGORY_CODE = 'STOCK_CONDITION_PRISTINE')
        WHERE SUPP_ORGU_LINK.orgu_id = #{param1} AND PRODUCT.DELETED = 0
        <if test="param2 != null">
            AND
            <foreach collection="param2" item="item" index="index"
                     open ="(" separator=" AND " close=")">
                ${item.column} ${item.operator} #{item.value}
            </foreach>
        </if>
    </select>

    <select id="getProductPerOrgUnitIdAndProdId" resultMap="productDetailMap" >
        SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>,
        <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>,
        <include refid="au.com.biztune.retail.dao.ConfigCategoryDao.configCategoryColumns"><property name="alias" value="prodStatus"/></include>
        FROM
        PRODUCT prod
        INNER JOIN PROD_ORGU_LINK prou ON (prod.prod_id = prou.prod_id)
        LEFT OUTER JOIN
        CONFIG_CATEGORY prodStatus on (prou.CAT_ID_STATUS = prodStatus.CATEGORY_ID)
        WHERE prou.orgu_id = #{param1} and prou.PROD_ID = #{param2}
    </select>

    <select id="getProductPerProdId" resultMap="productDetailMap" >
        SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>,
        <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>,
        <include refid="au.com.biztune.retail.dao.ConfigCategoryDao.configCategoryColumns"><property name="alias" value="prodStatus"/></include>
        FROM
        PRODUCT prod
        INNER JOIN PROD_ORGU_LINK prou ON (prod.prod_id = prou.prod_id)
        LEFT OUTER JOIN
        CONFIG_CATEGORY prodStatus on (prou.CAT_ID_STATUS = prodStatus.CATEGORY_ID)
        WHERE prod.PROD_ID = #{value}
    </select>

    <select id="getProductPerReference" resultMap="productDetailMap" >
        SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>,
        <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>,
        <include refid="au.com.biztune.retail.dao.ConfigCategoryDao.configCategoryColumns"><property name="alias" value="prodStatus"/></include>
        FROM
        PRODUCT prod
        INNER JOIN PROD_ORGU_LINK prou ON (prod.prod_id = prou.prod_id)
        LEFT OUTER JOIN
        CONFIG_CATEGORY prodStatus on (prou.CAT_ID_STATUS = prodStatus.CATEGORY_ID)
        WHERE prod.REFERENCE = #{value} and prod.DELETED = 0
    </select>

    <select id="getProductPerSku" resultMap="productDetailMap" >
        SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>,
        <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>,
        <include refid="au.com.biztune.retail.dao.ConfigCategoryDao.configCategoryColumns"><property name="alias" value="prodStatus"/></include>
        FROM
        PRODUCT prod
        INNER JOIN PROD_ORGU_LINK prou ON (prod.prod_id = prou.prod_id)
        LEFT OUTER JOIN
        CONFIG_CATEGORY prodStatus on (prou.CAT_ID_STATUS = prodStatus.CATEGORY_ID)
        WHERE prod.PROD_SKU = #{value} and prod.DELETED = 0
    </select>

    <select id="getProductPerSkuAndRef" resultMap="productDetailMap" >
        SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>,
        <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>,
        <include refid="au.com.biztune.retail.dao.ConfigCategoryDao.configCategoryColumns"><property name="alias" value="prodStatus"/></include>
        FROM
        PRODUCT prod
        INNER JOIN PROD_ORGU_LINK prou ON (prod.prod_id = prou.prod_id)
        LEFT OUTER JOIN
        CONFIG_CATEGORY prodStatus on (prou.CAT_ID_STATUS = prodStatus.CATEGORY_ID)
        WHERE prod.PROD_SKU = #{param1} AND prod.REFERENCE = #{param2} AND prod.DELETED = 0
    </select>

    <select id="checkProductExistPerSkuAndRef" resultMap="productCheckLiteMap" >
        SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>
        FROM
          PRODUCT prod
        WHERE prod.PROD_SKU = #{param1} and prod.REFERENCE = #{param2} and prod.DELETED = 0
    </select>


    <select id="getProductSaleItemPerSku" resultMap="productSaleItemMap" >
        SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>,
        <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>
        FROM
        PRODUCT prod
        INNER JOIN PROD_ORGU_LINK prou ON (prod.prod_id = prou.prod_id)
        WHERE prod.PROD_SKU = #{value} and prod.DELETED = 0
    </select>

    <select id="getProductSaleItemPerReference" resultMap="productSaleItemMap" >
        SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>,
        <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>
        FROM
        PRODUCT prod
        INNER JOIN PROD_ORGU_LINK prou ON (prod.prod_id = prou.prod_id)
        WHERE prod.REFERENCE = #{value}
    </select>

    <select id="getProductSaleItemPerProdId" resultMap="productSaleItemMap" >
        SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>,
        <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>
        FROM
        PRODUCT prod
        INNER JOIN PROD_ORGU_LINK prou ON (prod.prod_id = prou.prod_id)
        WHERE prod.PROD_ID = #{value}
    </select>


    <select id="getAllProductSaleItemsPerOrgUnitId" resultMap="productSaleItemLiteMap" >
        SELECT
        prod.prod_id, prod.prod_sku, prod.reference, prod.prod_name
        FROM
        PRODUCT prod where prod.DELETED = 0 and (prod.prod_sku like #{value} or prod.reference like #{value} or prod.prod_name like #{value})
    </select>

    <select id="getProductSaleItemPerOrgUnitIdAndSku" resultMap="productSaleItemMap" >
        SELECT
        <include refid="productColumns"><property name="alias" value="prod"/></include>,
        <include refid="prodOrguLinkColumns"><property name="alias" value="prou"/></include>
        FROM
        PRODUCT prod
        INNER JOIN PROD_ORGU_LINK prou ON (prod.prod_id = prou.prod_id)
        WHERE prou.orgu_id = #{param1} AND prod.prod_sku = #{param2} and prod.DELETED = 0
    </select>

    <insert id="insertProduct" parameterType="Product" useGeneratedKeys="true" keyProperty="id" keyColumn="PROD_ID">
        INSERT INTO PRODUCT(
            ORGU_ID_OWNING,
            PROD_SKU,
            PROD_BARCODE,
            REFERENCE,
            PROD_NAME,
            CAT_ID_TYPE,
            PROD_DESC,
            PROD_OWN_BRAND,
            PROD_CREATED,
            PROD_MODIFIED,
            PROD_BRAND,
            PROD_CLASS,
            PROD_LOCATION
        ) VALUES (
            #{orguIdOwning}
            <if test="prodSku != null">
                ,#{prodSku}
            </if>
            <if test="prodSku == null">
                ,null
            </if>
            <if test="prodBarcode != null">
                ,#{prodBarcode}
            </if>
            <if test="prodBarcode == null">
                ,null
            </if>
            <if test="reference != null">
                ,#{reference}
            </if>
            <if test="reference == null">
                ,null
            </if>
            <if test="prodName != null">
                ,#{prodName}
            </if>
            <if test="prodName == null">
                ,null
            </if>
            <if test="prodType != null">
                ,#{prodType.id}
            </if>
            <if test="prodType == null">
                ,null
            </if>
            <if test="prodDesc != null">
                ,#{prodDesc}
            </if>
            <if test="prodDesc == null">
                ,null
            </if>
            <if test="prodOwnBrand != null">
                ,#{prodOwnBrand}
            </if>
            <if test="prodOwnBrand == null">
                ,null
            </if>
            <if test="prodCreated != null">
                ,#{prodCreated}
            </if>
            <if test="prodCreated == null">
                ,null
            </if>
            <if test="prodModified != null">
                ,#{prodModified}
            </if>
            <if test="prodModified == null">
                ,null
            </if>
            <if test="prodBrand != null">
                ,#{prodBrand}
            </if>
            <if test="prodBrand == null">
                ,null
            </if>
            <if test="prodClass != null">
                ,#{prodClass}
            </if>
            <if test="prodClass == null">
                ,null
            </if>
            <if test="prodLocation != null">
                ,#{prodLocation}
            </if>
            <if test="prodLocation == null">
                ,null
            </if>
            )
    </insert>


    <insert id="insertProdOrguLink" parameterType="ProdOrguLink" useGeneratedKeys="true" keyProperty="id" keyColumn="PROU_ID">
        INSERT INTO PROD_ORGU_LINK(
        PROD_ID,
        ORGU_ID,
        PROU_REFUNDABLE,
        PROU_DISCOUNTABLE,
        PROU_CAN_QTY_SALE,
        PROU_FORCE_QTY,
        PROU_REFUND_DAYS,
        CAT_ID_STATUS
        ) VALUES (
        #{prodId},
        #{orguId},
        #{prouRefundable},
        #{prouDiscountable},
        #{prouCanQtySale},
        #{prouForceQty}
            <if test="prouRefundDays != null">
                ,#{prouRefundDays}
            </if>
            <if test="prouRefundDays == null">
                ,null
            </if>
        ,#{status.id}
        )
    </insert>

    <insert id="insertProdTaxLink" parameterType="ProuTxrlLink">
        INSERT INTO PROU_TXRL_LINK(
          PROU_ID,
          TXRL_ID
        ) VALUES (
            #{prouId},
            #{txrlId}
        )
    </insert>

    <update id="updateProduct" parameterType="Product" >
        UPDATE PRODUCT SET
        PROD_MODIFIED = #{prodModified}
        <if test="prodSku != null">
            ,PROD_SKU = #{prodSku}
        </if>
        <if test="prodBarcode != null">
            ,PROD_BARCODE = #{prodBarcode}
        </if>
        <if test="reference != null">
            ,REFERENCE = #{reference}
        </if>
        <if test="prodName != null">
            ,PROD_NAME = #{prodName}
        </if>
        <if test="prodType != null">
            ,CAT_ID_TYPE = #{prodType.id}
        </if>
        <if test="prodDesc != null">
            ,PROD_DESC = #{prodDesc}
        </if>
        <if test="prodOwnBrand != null">
            ,PROD_OWN_BRAND = #{prodOwnBrand}
        </if>
        <if test="prodBrand != null">
            ,PROD_BRAND = #{prodBrand}
        </if>
        <if test="prodClass != null">
            ,PROD_CLASS = #{prodClass}
        </if>
        <if test="prodLocation != null">
            ,PROD_LOCATION = #{prodLocation}
        </if>
        <if test="deleted != null">
            ,DELETED = #{deleted}
        </if>
        WHERE PROD_ID = #{id}
    </update>

    <update id="updateProductDescription">
        UPDATE PRODUCT SET
            PROD_DESC = #{param1}
        WHERE PROD_ID = #{param2}
    </update>

    <update id="updateProductStatus">
        UPDATE PROD_ORGU_LINK
        SET CAT_ID_STATUS = #{param1}
        WHERE ORGU_ID = #{param2}
        and PROD_ID in
        <foreach collection="param3" item="item" index="index"
                 open ="(" separator="," close=")">
            #{item}
        </foreach>

    </update>

    <delete id="deleteProdOrguLink" >
        DELETE
        From PROD_ORGU_LINK
        WHERE
        PROU_ID = #{value}
    </delete>

    <delete id="deleteProdTaxLink" >
        DELETE
        From PROU_TXRL_LINK
        WHERE
        PROU_ID = #{value}
    </delete>

    <delete id="deleteProduct" >
        DELETE
        From PRODUCT
        WHERE
        PROD_ID = #{value}
    </delete>


</mapper>