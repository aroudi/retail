subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'java'
    java.toolchain.languageVersion = JavaLanguageVersion.of(11)  // auto install

// check JDK version
    if (!System.getProperty("java.home").contains(java.toolchain.languageVersion.get().toString())) {
        def msg = ('JDK in this project: ' + System.getProperty('java.home') + '\n' +
                'In this project, you should use JDK-' + java.toolchain.languageVersion.get())
        throw new GradleException(msg)
    }

	//sourceCompatibility = JavaVersion.VERSION_11
	ext {
	
		// Verify that the tomCatHome directory exists
		tomCatHome = System.getenv()['CATALINA_HOME']
		if (!tomCatHome) {
			throw new GradleException("Unable to locate tomCatHome : ${tomCatHome}")
		}
		
		projectVersion = '2.6.RELEASE'
		commonsDbcp2Version = '2.7.0'
        commonsDbcpVersion='1.4'
		springVersion = '5.2.4.RELEASE'
        springSecurityVersion = '5.5.1.RELEASE'
		checkstyleVersion = '6.3'
		jdependVersion = '2.9.1'
		//antJdependVersion = '1.9.4'
		jodaTimeVersion = '2.10.3'
        mockitoVersion = '1.10.19'
		//findbugsVersion = '3.0.0'
        guavaVersion = '18.0'
        slf4jVersion = '1.7.28'
        jerseyGlassfishVer ='2.33'
        jerseySpring ='2.34'
        jvnet_mimepull_ver='1.9.3'
        javax_servlet_ver='3.1-b01'
        mybatis_version='3.4.0'
        mybatis_spring_ver='1.3.2'
        logback_version='1.0.7'
        logback_core_version='1.0.6'
        jasper_report_ver='6.4.0'
        jax_rs_version='2.0'
        jaxbVersion='2.3.0'

	}	
    //sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir
    configurations {
        // This configuration is used for JAR dependencies that are going to be
        // provided by the application container, and should not be made part
        // the standard distribution.
        provided
    }

	// Setup Checkstyle property to match the root of the project. The reason
    // for this name for the property is that it matches that used by the
    // Checkstyle Eclipse plugin.
    checkstyle {
        configProperties.project_loc = projectDir
        // Set the location of the rules file to be the global one
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    // Setup Checkstyle classpath to find all provided stuff
    checkstyleMain {
        classpath += configurations.provided
    }

    checkstyleTest {
        classpath += configurations.provided
    }


    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {

        ////////////////////////////////////////////////////////////////////////
        // Plugin dependencies
        ////////////////////////////////////////////////////////////////////////
        checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: checkstyleVersion
        ////////////////////////////////////////////////////////////////////////
        // Add Server Provided dependencies
        ////////////////////////////////////////////////////////////////////////

        provided fileTree("${tomCatHome}/lib") {
            include 'servlet-api.jar'
            include 'ojdbc6-11.2.0.jar'
        }

    }

    // This trick adds the provided JAR files to to the classpath
    sourceSets {
        main { compileClasspath += configurations.provided }
        test { compileClasspath += configurations.provided }
    }

    test {
        classpath += configurations.provided
    }
}

task clean {
    doLast {
        delete buildDir
    }
}
