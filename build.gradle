// Maven Repo - Local File System
project.ext["depsDir"] = 'file://V:/repository'

subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'java'
	apply plugin: 'findbugs'
	apply plugin: 'jdepend'
	

	sourceCompatibility = JavaVersion.VERSION_1_7
	ext {
	
		// Verify that the tomCatHome directory exists
		tomCatHome = System.getenv()['CATALINA_HOME']
		if (!tomCatHome) {
			throw new GradleException("Unable to locate tomCatHome : ${tomCatHome}")
		}
		
		projectVersion = '0.0.1-SNAPSHOT'
		commonsDbcp2Version = '2.0.1'
		springVersion = '3.2.2.RELEASE'
		jerseyVersion = '1.17'
		checkstyleVersion = '6.3'
		jdependVersion = '2.9.1'
		antJdependVersion = '1.9.4'
		jodaTimeVersion = '2.8.1'
        mockitoVersion = '1.10.19'
		findbugsVersion = '3.0.0'
        guavaVersion = '18.0'
        slf4jVersion = '1.7.10'
		
	}	
    sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir
    configurations {
        // This configuration is used for JAR dependencies that are going to be
        // provided by the application container, and should not be made part
        // the standard distribution.
        provided
    }

	// Setup Checkstyle property to match the root of the project. The reason
    // for this name for the property is that it matches that used by the
    // Checkstyle Eclipse plugin.
    checkstyle {
        configProperties.project_loc = projectDir
        // Set the location of the rules file to be the global one
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    // Setup Checkstyle classpath to find all provided stuff
    checkstyleMain {
        classpath += configurations.provided
    }

    checkstyleTest {
        classpath += configurations.provided
    }


    repositories {
        //mavenCentral()
        maven {
            // For now look in a fixed place Maven Repository - File Share
            url project["depsDir"]
        }
    }
    dependencies {

        ////////////////////////////////////////////////////////////////////////
        // Plugin dependencies
        ////////////////////////////////////////////////////////////////////////
        checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: checkstyleVersion
        jdepend group: 'jdepend', name: 'jdepend', version: jdependVersion
        jdepend group: 'org.apache.ant', name: 'ant-jdepend', version: antJdependVersion
		findbugs group: 'com.google.code.findbugs', name: 'findbugs', version: findbugsVersion
        ////////////////////////////////////////////////////////////////////////
        // Add Server Provided dependencies
        ////////////////////////////////////////////////////////////////////////

        provided fileTree("${tomCatHome}/lib") {
            include 'servlet-api.jar'
            include 'ojdbc6-11.2.0.jar'
        }

    }

    // This trick adds the provided JAR files to to the classpath
    sourceSets {
        main { compileClasspath += configurations.provided }
        test { compileClasspath += configurations.provided }
    }

    test {
        classpath += configurations.provided
    }

	    // Task for Find Bugs

    findbugs {
        toolVersion = findbugsVersion
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        reportsDir = file("$project.buildDir/findbugsReports")
        effort = "max"
        reportLevel = "high"
        visitors = ["FindSqlInjection", "SwitchFallthrough"]
        omitVisitors = ["FindNonShortCircuit"]
        includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
        excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")

    }

    findbugsMain {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
	
	
	// After all checks are performed and passed, so extra checks.
    // Specifically:
    //   - The JDepend has not detected any circular dependencies. This is
    //     non-negotiable.
    /*
    check.doLast {
        ['main', 'test'].each { f ->
            File cycles = file("${project.reporting.baseDir}/jdepend/${f}.xml")
            if (cycles.file) {
                def records = new XmlSlurper().parse(cycles)
                def num = records.Cycles.Package.size()
                if (0 < num) {
                    throw new GradleException("Found ${num} circular dependencies. See ${cycles} for details.")
                }
            }
        }
    }
    */
}

task clean << {
    delete buildDir
}
