use [retail]
go

alter table purchase_line add POL_QTY_RESERVED DECIMAL(31,4)
go

--PHYSICAL LOCATION OF STOCK.
CREATE TABLE STOCK_LOCATION(
    STCK_LOCN_ID DECIMAL(31,0)IDENTITY (1,1) NOT NULL,
    STCK_LOCN_CODE VARCHAR(100) NULL,
    STCK_LOCN_NAME VARCHAR(100) NULL,
    STCK_LOCN_ADDRESS VARCHAR(500) NULL,
    ORGU_ID DECIMAL(31,0),
    STORE_ID DECIMAL(31,0)
);

CREATE TABLE STOCK(
    STCK_ID DECIMAL(31,0) IDENTITY (1,1) NOT NULL,
    SUPPLIER_ID DECIMAL(31,0) NULL,
    PROD_ID DECIMAL(31,0) NOT NULL,
    PRGP_ID DECIMAL(31,0),
    SELC_ID DECIMAL(31,0),
    ORGU_ID_LOCATION DECIMAL(31,0) NOT NULL,
    STCK_QTY DECIMAL(31,4) NOT NULL,
    UNOM_ID DECIMAL(31,0),
    STCK_COND DECIMAL(31,0) NOT NULL,
    STCK_CAT DECIMAL(31,0) NOT NULL,
    STCK_LOCN_ID DECIMAL(31,0),
    ORGU_ID_RESPBILITY DECIMAL(31,0),
    STCK_VALUE DECIMAL(31,6),
    STCK_LAST_VERIFIED datetime,
    LEGT_ID DECIMAL(31,0)
);

CREATE TABLE STOCK_EVENT(
    STCK_EVNT_ID DECIMAL(31,0) IDENTITY (1,1) NOT NULL,
    STCK_ID DECIMAL(31,0) NOT NULL,
    ORGU_ID DECIMAL(31,0),
    STORE_ID DECIMAL(31,0),
    USR_ID DECIMAL(31,0),
    SUPPLIER_ID DECIMAL(31,0) NULL,
    UNOM_ID DECIMAL(31,0),
    PROD_ID DECIMAL(31,0) NOT NULL,
    PRGP_ID DECIMAL(31,0),
    SELC_ID DECIMAL(31,0),
    STCK_EVNT_DATE datetime,
    TXN_DATE datetime,
    TXN_TYPE DECIMAL(31,0),
    TXN_HEADER DECIMAL(31,0),
    TXN_LINE DECIMAL(31,0),
    TXN_NUMBER VARCHAR(100),
    STCK_LOCN_ID DECIMAL(31,0),
    STCK_QTY DECIMAL(31,4) NOT NULL,
    SELL_PRICE DECIMAL(31,6),
    COST_PRICE DECIMAL(31,6),
    STCK_COND DECIMAL(31,0),
    STCK_CAT DECIMAL(31,0)
);


ALTER TABLE STOCK_LOCATION
 ADD  CONSTRAINT STOCK_LOCATION_PK PRIMARY KEY(STCK_LOCN_ID);
GO

ALTER TABLE STOCK
 ADD  CONSTRAINT STOCK_PK PRIMARY KEY(STCK_ID);
GO

ALTER TABLE STOCK_EVENT
 ADD  CONSTRAINT STOCK_EVENT_PK PRIMARY KEY(STCK_EVNT_ID);
GO

ALTER TABLE STOCK_LOCATION ADD CONSTRAINT STOCK_LOCATION_FK1 FOREIGN KEY (ORGU_ID) REFERENCES ORG_UNIT(ORGU_ID);
go

ALTER TABLE STOCK_LOCATION ADD CONSTRAINT STOCK_LOCATION_FK2 FOREIGN KEY (STORE_ID) REFERENCES STORE(STORE_ID);
go

ALTER TABLE STOCK ADD CONSTRAINT STOCK_FK2 FOREIGN KEY (PROD_ID) REFERENCES PRODUCT(PROD_ID);
go

ALTER TABLE STOCK ADD CONSTRAINT STOCK_FK4 FOREIGN KEY (ORGU_ID_LOCATION) REFERENCES ORG_UNIT(ORGU_ID);
go

ALTER TABLE STOCK ADD CONSTRAINT STOCK_FK5 FOREIGN KEY (UNOM_ID) REFERENCES UNIT_OF_MEASURE(UNOM_ID);
go

ALTER TABLE STOCK ADD CONSTRAINT STOCK_FK6 FOREIGN KEY (STCK_COND) REFERENCES CONFIG_CATEGORY(CATEGORY_ID);
go

ALTER TABLE STOCK ADD CONSTRAINT STOCK_FK7 FOREIGN KEY (STCK_CAT) REFERENCES CONFIG_CATEGORY(CATEGORY_ID);
go

ALTER TABLE STOCK ADD CONSTRAINT STOCK_FK8 FOREIGN KEY (STCK_LOCN_ID) REFERENCES STOCK_LOCATION(STCK_LOCN_ID);
go

ALTER TABLE STOCK ADD CONSTRAINT STOCK_FK9 FOREIGN KEY (ORGU_ID_RESPBILITY) REFERENCES ORG_UNIT(ORGU_ID);
go

ALTER TABLE STOCK_EVENT ADD CONSTRAINT STOCK_EVENT_FK1 FOREIGN KEY (STCK_ID) REFERENCES STOCK(STCK_ID);
go

ALTER TABLE STOCK_EVENT ADD CONSTRAINT STOCK_EVENT_FK2 FOREIGN KEY (ORGU_ID) REFERENCES ORG_UNIT(ORGU_ID);
go

ALTER TABLE STOCK_EVENT ADD CONSTRAINT STOCK_EVENT_FK4 FOREIGN KEY (USR_ID) REFERENCES APP_USER(USR_ID);
go

ALTER TABLE STOCK_EVENT ADD CONSTRAINT STOCK_EVENT_FK5 FOREIGN KEY (PROD_ID) REFERENCES PRODUCT(PROD_ID);
go

ALTER TABLE STOCK_EVENT ADD CONSTRAINT STOCK_EVENT_FK8 FOREIGN KEY (TXN_TYPE) REFERENCES CONFIG_CATEGORY(CATEGORY_ID);
go

ALTER TABLE STOCK_EVENT ADD CONSTRAINT STOCK_EVENT_FK9 FOREIGN KEY (STCK_COND) REFERENCES CONFIG_CATEGORY(CATEGORY_ID);
go

ALTER TABLE STOCK_EVENT ADD CONSTRAINT STOCK_EVENT_FK10 FOREIGN KEY (STCK_CAT) REFERENCES CONFIG_CATEGORY(CATEGORY_ID);
go

ALTER TABLE STOCK_EVENT ADD CONSTRAINT STOCK_EVENT_FK12 FOREIGN KEY (UNOM_ID) REFERENCES UNIT_OF_MEASURE(UNOM_ID);
go

ALTER TABLE STOCK_EVENT ADD CONSTRAINT STOCK_EVENT_FK14 FOREIGN KEY (STCK_LOCN_ID) REFERENCES STOCK_LOCATION(STCK_LOCN_ID);
go

CREATE INDEX STOCK_LOCATION_IDX1 ON STOCK_LOCATION
(STCK_LOCN_NAME)
go

CREATE INDEX STOCK_IDX1 ON STOCK
(PROD_ID)
go

CREATE INDEX STOCK_IDX2 ON STOCK
(ORGU_ID_LOCATION)
go


CREATE INDEX STOCK_IDX3 ON STOCK
(STCK_COND)
go

CREATE INDEX STOCK_IDX4 ON STOCK
(STCK_CAT)
go

CREATE INDEX STOCK_IDX5 ON STOCK
(STCK_LOCN_ID)
go


CREATE INDEX STOCK_EVENT_IDX1 ON STOCK_EVENT
(STCK_ID)
go

CREATE INDEX STOCK_EVENT_IDX2 ON STOCK_EVENT
(ORGU_ID)
go

CREATE INDEX STOCK_EVENT_IDX3 ON STOCK_EVENT
(STORE_ID)
go

CREATE INDEX STOCK_EVENT_IDX4 ON STOCK_EVENT
(USR_ID)
go

CREATE INDEX STOCK_EVENT_IDX5 ON STOCK_EVENT
(PROD_ID)
go

CREATE INDEX STOCK_EVENT_IDX6 ON STOCK_EVENT
(STCK_EVNT_DATE)
go

CREATE INDEX STOCK_EVENT_IDX7 ON STOCK_EVENT
(TXN_DATE)
go

CREATE INDEX STOCK_EVENT_IDX8 ON STOCK_EVENT
(TXN_TYPE)
go

CREATE INDEX STOCK_EVENT_IDX9 ON STOCK_EVENT
(TXN_NUMBER)
go

CREATE INDEX STOCK_EVENT_IDX10 ON STOCK_EVENT
(STCK_COND)
go

CREATE INDEX STOCK_EVENT_IDX11 ON STOCK_EVENT
(STCK_CAT)
go


-------------------------------------- data -------------------------------------------
----- data ----

INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='TXN_TYPE'),'TXN_TYPE_GOODS_IN', 'GOODS IN', 'GOODS IN');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='TXN_TYPE'),'TXN_TYPE_GOODS_RESERVE', 'GOODS RESERVED', 'GOODS RESERVED');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='TXN_TYPE'),'TXN_TYPE_GOODS_CANCEL_RESERVE', 'RESERVED CANCELED', 'GOODS RESERVED CANCELED');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='TXN_TYPE'),'TXN_TYPE_GOODS_IN_TRANSIT', 'IN TRANSIT', 'GOODS IN TRANSIT');
GO


------------------------ STOCK TYPE -------------------
INSERT INTO CONFIG_TYPE(CONFIG_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ('STOCK_TYPE', 'STOCK TYPE', 'STOCK TYPE');
GO

INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_TYPE'),'STOCK_TYPE_STOCKABLE', 'STOCKABLE', 'Physical products where a stock count/inventory is kept');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_TYPE'),'STOCK_TYPE_NON_STOCKABLE', 'NON-STOCKABLE', 'Physical products where a stock count/inventory is not kept, for examplewhere the product is of such a little valuethat the cost of keeping an inventory of the stock outweights the value of the stock');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_TYPE'),'STOCK_TYPE_INTANGIBLE', 'INTANGIBLE', 'non physical product where a stock count/inventory can not be kept such as a service, delivery charge etc.');
GO

  ------------------------ STOCK CATEGORY -------------------
INSERT INTO CONFIG_TYPE(CONFIG_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ('STOCK_CATEGORY', 'STOCK CATEGORY', 'STOCK CATEGORY');
GO

INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_CATEGORY'),'STOCK_CATEGORY_SALEABLE', 'SALEABLE', 'Stock that is available for sale');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_CATEGORY'),'STOCK_CATEGORY_NON_SALEABLE', 'NON SALEABLE', 'Stock that is not available for sale e.g. Held');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_CATEGORY'),'STOCK_CATEGORY_RESERVED', 'RESERVED', 'Stock that is not available for sale because it is reserved');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_CATEGORY'),'STOCK_CATEGORY_LAYAWAY', 'LAYAWAY', 'Stock that is not available for sale because it is held for LAYAWAY transaction');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_CATEGORY'),'STOCK_CATEGORY_IN_DISPATCH', 'IN DISPATCH', 'Stock that is not available for sale because it is about to be dispatched in a Stock Transfer transaction');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_CATEGORY'),'STOCK_CATEGORY_IN_TRANSIT', 'IN TRANSIT', 'Stock that is not available for sale because it is being transfered to site - we can consider this one for projects');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_CATEGORY'),'STOCK_CATEGORY_RETURN', 'RETURN', 'Stock that is not available for sale because it is being prepared for return to warehouse, returns location or supplier');
GO

  ------------------------ STOCK CONDITION -------------------
INSERT INTO CONFIG_TYPE(CONFIG_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ('STOCK_CONDITION', 'STOCK CONDITION', 'STOCK CONDITION');
GO

INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_CONDITION'),'STOCK_CONDITION_PRISTINE', 'PRISTINE', 'Stock that is perfect and can be sold');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_CONDITION'),'STOCK_CONDITION_DAMAGED', 'DAMAGED', 'Stock that has been classified as damaged and can be written off, returned, repaired or sold(e.g. at a discount');
GO
INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='STOCK_CONDITION'),'STOCK_CONDITION_FAULTY', 'FAULTY', 'Stock that has been classified as faulty and can be written off, returned, repaired or sold(e.g. at a discount');
GO


------ ASSIGNE STOCK_LOCATION TO ORG_UNIT AND STORE

INSERT INTO STOCK_LOCATION(ORGU_ID, STORE_ID, STCK_LOCN_CODE, STCK_LOCN_NAME, STCK_LOCN_ADDRESS) VALUES ((SELECT ORGU_ID FROM ORG_UNIT WHERE ORGU_CODE='JOMON'),(SELECT STORE_ID FROM STORE WHERE STORE_CODE='JOMON_SYD'),'STOCK_SYD', 'SYDNEY MAIN STOCK', '32 SPENCER STREET, FIVE DOCK, NSW 2046')
GO

-- customer comment

alter table customer add 	[COMMENT] [varchar](1000) NULL
go

INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION, COLOR) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='CUSTOMER_STATUS'),'CUSTOMER_STATUS_ON_HOLD', 'ON HOLD', 'ON HOLD','amber');
GO

INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION, COLOR) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='CUSTOMER_STATUS'),'CUSTOMER_STATUS_IN_ACTIVE', 'IN-ACTIVE', 'IN-ACTIVE','yellow');
GO

-- not applied to the jomon

drop index TXHDIX02 on TXN_HEADER
go

alter table txn_header alter column TXHD_TXN_NR varchar(200)
go

alter table txn_header alter column TXHD_ORIG_TXN_NR varchar(200)
go

CREATE INDEX TXHDIX02 ON TXN_HEADER
(TXHD_TXN_NR)
go

INSERT INTO ACCESS_POINT (ACPT_NAME, ACPT_TOKEN,ACPT_DESC) VALUES ('PDF Viewer', 'pdfViewer', 'PDF Viewer');
go
INSERT INTO USER_ACCESS(USR_ID, ACPT_ID) VALUES ( (select USR_ID from APP_USER WHERE USR_NAME = 'Admin'), (select ACPT_ID FROM ACCESS_POINT WHERE ACPT_TOKEN = 'pdfViewer' ));
go
-- up to this point applied to jomon on 17/08/16 11:00

INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='TXN_TYPE'),'TXN_TYPE_INVOICE', 'INVOICE', 'INVOICE');
GO

alter table TXN_DETAIL add TXDE_QTY_INVOICED DECIMAL(31,4)
go

alter table TXN_DETAIL add TXDE_QTY_BALANCE DECIMAL(31,4)
go

alter table TXN_DETAIL add TXDE_QTY_TOTAL_INVOICED DECIMAL(31,4)
go
--INVOICE

CREATE TABLE INVOICE (
    TXIV_ID DECIMAL(31,0)IDENTITY (1,1) NOT NULL,
    TXHD_ID DECIMAL(31,0),
    ORGU_ID DECIMAL(31,0) NOT NULL,
    STORE_ID DECIMAL(31,0) NOT NULL,
    TXIV_TXN_NR varchar(200),
    TXHD_TXN_NR varchar(200),
    TXIV_TRADING_DATE datetime,
    TXIV_OPERATOR DECIMAL(31,0),
    TXIV_VALUE_GROSS DECIMAL(31,6),
    TXIV_VALUE_NETT DECIMAL(31,6),
    TXIV_VALUE_DUE DECIMAL(31,6),
    TXIV_VALUE_CHANGE DECIMAL(31,6),
    TXIV_VAL_ROUNDING DECIMAL(31,6),
    TXIV_VALUE_TAXABLE DECIMAL(31,6),
    TXIV_VALUE_TAX DECIMAL(31,6),
    TXIV_RECEIPT_ID VARCHAR(50),
    CUSTOMER_ID DECIMAL(31,0),
    TXIV_REFUND_EXPIRY datetime,
    TXIV_COLLECT_DATE datetime
)
GO

CREATE TABLE INVOICE_DETAIL (
    TXID_ID DECIMAL(31,0)IDENTITY (1,1) NOT NULL,
    TXIV_ID DECIMAL(31,0),
    TXDE_ID DECIMAL(31,0),
    ORGU_ID DECIMAL(31,0) NOT NULL,
    STORE_ID DECIMAL(31,0) NOT NULL,
    TXID_QTY_INVOICED DECIMAL(31,4),
    TXID_PRICE_SOLD DECIMAL(31,6)
)
GO

CREATE TABLE INVOICE_MEDIA (
    TXIM_ID DECIMAL(31,0)IDENTITY (1,1) NOT NULL,
    TXIV_ID DECIMAL(31,0),
    TXMD_ID DECIMAL(31,0),
    ORGU_ID DECIMAL(31,0) NOT NULL,
    STORE_ID DECIMAL(31,0) NOT NULL
)
GO

ALTER TABLE INVOICE
 ADD  CONSTRAINT INVOICE_PK PRIMARY KEY(TXIV_ID);
GO

ALTER TABLE INVOICE_DETAIL
 ADD  CONSTRAINT INVOICE_DETAIL_PK PRIMARY KEY(TXID_ID);
GO

ALTER TABLE INVOICE_MEDIA
 ADD  CONSTRAINT INVOICE_MEDIA_PK PRIMARY KEY(TXIM_ID);
GO


ALTER TABLE INVOICE ADD CONSTRAINT INVOICE_FK1 FOREIGN KEY (TXHD_ID) REFERENCES TXN_HEADER(TXHD_ID);
go

ALTER TABLE INVOICE ADD CONSTRAINT INVOICE_FK2 FOREIGN KEY (ORGU_ID) REFERENCES ORG_UNIT(ORGU_ID);
go

ALTER TABLE INVOICE ADD CONSTRAINT INVOICE_FK3 FOREIGN KEY (STORE_ID) REFERENCES STORE(STORE_ID);
go

ALTER TABLE INVOICE ADD CONSTRAINT INVOICE_FK4 FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID);
go

ALTER TABLE INVOICE_DETAIL ADD CONSTRAINT INVOICE_DETAIL_FK1 FOREIGN KEY (TXIV_ID) REFERENCES INVOICE(TXIV_ID);
go

ALTER TABLE INVOICE_DETAIL ADD CONSTRAINT INVOICE_DETAIL_FK2 FOREIGN KEY (TXDE_ID) REFERENCES TXN_DETAIL(TXDE_ID);
go

ALTER TABLE INVOICE_DETAIL ADD CONSTRAINT INVOICE_DETAIL_FK3 FOREIGN KEY (ORGU_ID) REFERENCES ORG_UNIT(ORGU_ID);
go

ALTER TABLE INVOICE_DETAIL ADD CONSTRAINT INVOICE_DETAIL_FK4 FOREIGN KEY (STORE_ID) REFERENCES STORE(STORE_ID);
go


ALTER TABLE INVOICE_MEDIA ADD CONSTRAINT INVOICE_MEDIA_FK1 FOREIGN KEY (TXIV_ID) REFERENCES INVOICE(TXIV_ID);
go

ALTER TABLE INVOICE_MEDIA ADD CONSTRAINT INVOICE_MEDIA_FK2 FOREIGN KEY (TXMD_ID) REFERENCES TXN_MEDIA(TXMD_ID);
go

ALTER TABLE INVOICE_MEDIA ADD CONSTRAINT INVOICE_MEDIA_FK3 FOREIGN KEY (ORGU_ID) REFERENCES ORG_UNIT(ORGU_ID);
go

ALTER TABLE INVOICE_MEDIA ADD CONSTRAINT INVOICE_MEDIA_FK4 FOREIGN KEY (STORE_ID) REFERENCES STORE(STORE_ID);
go

INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='TXN_MEDIA_TYPE'),'TXN_MEDIA_DEPOSIT', 'DEPOSIT', 'TRANSACTION MEDIA DEPOSIT');
GO

INSERT INTO ACCESS_POINT (ACPT_NAME, ACPT_TOKEN,ACPT_DESC) VALUES ('List Invoice', 'listInvoice', 'View invoice list');
GO

INSERT INTO USER_ACCESS(USR_ID, ACPT_ID) VALUES ( (select USR_ID from APP_USER WHERE USR_NAME = 'Admin'), (select ACPT_ID FROM ACCESS_POINT WHERE ACPT_TOKEN = 'listInvoice' ));
GO



alter table PO_BOQ_LINK add COMMENT VARCHAR(1000)
go

--ACCOUNT PAYMENT

alter table Customer
  add CREDIT_LIMIT DECIMAL(31,6) DEFAULT 0 NOT NULL
go
alter table Customer
  add OWING DECIMAL(31,6) DEFAULT 0 NOT NULL
go
alter table Customer
  add REMAIN_CREDIT DECIMAL(31,6) DEFAULT 0 NOT NULL
go
alter table Customer
  add CREDIT_START_DATE datetime
go
alter table Customer
  add CREDIT_START_EOM BIT DEFAULT 0 NOT NULL
go
alter table Customer
  add   CREDIT_DURATION DECIMAL(31,0) DEFAULT 0 NOT NULL
go


CREATE TABLE CUSTOMER_ACCOUNT_DEBT(
    CAD_ID DECIMAL(31,0) IDENTITY(1,1) NOT NULL,
    CUSTOMER_ID DECIMAL(31,0)  NOT NULL,
    TXHD_ID DECIMAL(31,0)  NOT NULL,
    TXHD_TXN_NR varchar(200),
    CAD_AMOUNT_DEBT DECIMAL(31,6) DEFAULT 0 NOT NULL,
    BALANCE DECIMAL(31,6) DEFAULT 0 NOT NULL,
    CAD_START_DATE datetime,
    CAD_DUE_DATE datetime,
    CAD_PAYMENT_DATE datetime,
    CAD_PAIED BIT DEFAULT 0 NOT NULL
) ON [PRIMARY]
go

ALTER TABLE CUSTOMER_ACCOUNT_DEBT
 ADD  CONSTRAINT CUSTOMER_ACCOUNT_DEBT_PK PRIMARY KEY(CAD_ID);
GO


ALTER TABLE CUSTOMER_ACCOUNT_DEBT ADD CONSTRAINT CUSTOMER_ACCOUNT_DEBT_FK1 FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID);
go

ALTER TABLE CUSTOMER_ACCOUNT_DEBT ADD CONSTRAINT CUSTOMER_ACCOUNT_DEBT_FK2 FOREIGN KEY (TXHD_ID) REFERENCES INVOICE(TXIV_ID);
go



--CUSTOMER ACCOUNT DEBT PAYMENT
CREATE TABLE TXN_ACC_PAYMENT (
    TAP_ID DECIMAL(31,0)IDENTITY (1,1) NOT NULL,
    TXHD_ID DECIMAL(31,0),
    CAD_ID DECIMAL(31,0),
    ORGU_ID DECIMAL(31,0) ,
    STORE_ID DECIMAL(31,0),
    TAP_PAYMENT_DATE datetime,
    TAP_AMOUNT_PAID DECIMAL(31,6)
)
GO

ALTER TABLE TXN_ACC_PAYMENT
 ADD  CONSTRAINT TXN_ACC_PAYMENT_PK PRIMARY KEY(TAP_ID);
GO

ALTER TABLE TXN_ACC_PAYMENT ADD CONSTRAINT TXN_ACC_PAYMENT_FK1 FOREIGN KEY (TXHD_ID) REFERENCES TXN_HEADER(TXHD_ID);
go

ALTER TABLE TXN_ACC_PAYMENT ADD CONSTRAINT TXN_ACC_PAYMENT_FK2 FOREIGN KEY (CAD_ID) REFERENCES CUSTOMER_ACCOUNT_DEBT(CAD_ID);
go


INSERT INTO CONFIG_CATEGORY(CONFIG_TYPE_ID, CATEGORY_CODE, DISPLAY_NAME, DESCRIPTION) VALUES ((SELECT CONFIG_TYPE_ID FROM CONFIG_TYPE WHERE CONFIG_CODE='TXN_TYPE'),'TXN_TYPE_ACCOUNT_PAYMENT', 'ACCOUNT PAY', 'ACCOUNT PAYMENT'); --FOR RECORDING DEBTOR PAYMENT
GO


INSERT INTO ACCESS_POINT (ACPT_NAME, ACPT_TOKEN,ACPT_DESC) VALUES ('Debtor Payment', 'debtorPayment', 'Debtor Payment');
go

INSERT INTO USER_ACCESS(USR_ID, ACPT_ID) VALUES ( (select USR_ID from APP_USER WHERE USR_NAME = 'Admin'), (select ACPT_ID FROM ACCESS_POINT WHERE ACPT_TOKEN = 'debtorPayment' ));
go

alter table TXN_HEADER
  add   TXHD_DLV_ADDRESS VARCHAR(500)
go

-- applied to jomon on 13/09/16 11:35 pm